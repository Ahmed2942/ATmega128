
atmega128a.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000036  00800100  00000bbc  00000c50  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000bbc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  00800136  00800136  00000c86  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000c86  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000cb8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002c8  00000000  00000000  00000cf8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003514  00000000  00000000  00000fc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001070  00000000  00000000  000044d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001593  00000000  00000000  00005544  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000800  00000000  00000000  00006ad8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000c65  00000000  00000000  000072d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000032f9  00000000  00000000  00007f3d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000240  00000000  00000000  0000b236  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	68 c0       	rjmp	.+208    	; 0xd2 <__ctors_end>
   2:	00 00       	nop
   4:	83 c0       	rjmp	.+262    	; 0x10c <__bad_interrupt>
   6:	00 00       	nop
   8:	81 c0       	rjmp	.+258    	; 0x10c <__bad_interrupt>
   a:	00 00       	nop
   c:	7f c0       	rjmp	.+254    	; 0x10c <__bad_interrupt>
   e:	00 00       	nop
  10:	7d c0       	rjmp	.+250    	; 0x10c <__bad_interrupt>
  12:	00 00       	nop
  14:	7b c0       	rjmp	.+246    	; 0x10c <__bad_interrupt>
  16:	00 00       	nop
  18:	79 c0       	rjmp	.+242    	; 0x10c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	77 c0       	rjmp	.+238    	; 0x10c <__bad_interrupt>
  1e:	00 00       	nop
  20:	75 c0       	rjmp	.+234    	; 0x10c <__bad_interrupt>
  22:	00 00       	nop
  24:	73 c0       	rjmp	.+230    	; 0x10c <__bad_interrupt>
  26:	00 00       	nop
  28:	71 c0       	rjmp	.+226    	; 0x10c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	6f c0       	rjmp	.+222    	; 0x10c <__bad_interrupt>
  2e:	00 00       	nop
  30:	6d c0       	rjmp	.+218    	; 0x10c <__bad_interrupt>
  32:	00 00       	nop
  34:	6b c0       	rjmp	.+214    	; 0x10c <__bad_interrupt>
  36:	00 00       	nop
  38:	69 c0       	rjmp	.+210    	; 0x10c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	67 c0       	rjmp	.+206    	; 0x10c <__bad_interrupt>
  3e:	00 00       	nop
  40:	65 c0       	rjmp	.+202    	; 0x10c <__bad_interrupt>
  42:	00 00       	nop
  44:	63 c0       	rjmp	.+198    	; 0x10c <__bad_interrupt>
  46:	00 00       	nop
  48:	ad c4       	rjmp	.+2394   	; 0x9a4 <__vector_18>
  4a:	00 00       	nop
  4c:	5f c0       	rjmp	.+190    	; 0x10c <__bad_interrupt>
  4e:	00 00       	nop
  50:	d6 c4       	rjmp	.+2476   	; 0x9fe <__vector_20>
  52:	00 00       	nop
  54:	5b c0       	rjmp	.+182    	; 0x10c <__bad_interrupt>
  56:	00 00       	nop
  58:	59 c0       	rjmp	.+178    	; 0x10c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	57 c0       	rjmp	.+174    	; 0x10c <__bad_interrupt>
  5e:	00 00       	nop
  60:	55 c0       	rjmp	.+170    	; 0x10c <__bad_interrupt>
  62:	00 00       	nop
  64:	53 c0       	rjmp	.+166    	; 0x10c <__bad_interrupt>
  66:	00 00       	nop
  68:	51 c0       	rjmp	.+162    	; 0x10c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	4f c0       	rjmp	.+158    	; 0x10c <__bad_interrupt>
  6e:	00 00       	nop
  70:	4d c0       	rjmp	.+154    	; 0x10c <__bad_interrupt>
  72:	00 00       	nop
  74:	4b c0       	rjmp	.+150    	; 0x10c <__bad_interrupt>
  76:	00 00       	nop
  78:	ef c4       	rjmp	.+2526   	; 0xa58 <__vector_30>
  7a:	00 00       	nop
  7c:	47 c0       	rjmp	.+142    	; 0x10c <__bad_interrupt>
  7e:	00 00       	nop
  80:	18 c5       	rjmp	.+2608   	; 0xab2 <__vector_32>
  82:	00 00       	nop
  84:	43 c0       	rjmp	.+134    	; 0x10c <__bad_interrupt>
  86:	00 00       	nop
  88:	41 c0       	rjmp	.+130    	; 0x10c <__bad_interrupt>
  8a:	00 00       	nop
  8c:	ed 00       	.word	0x00ed	; ????
  8e:	fa 00       	.word	0x00fa	; ????
  90:	07 01       	movw	r0, r14
  92:	14 01       	movw	r2, r8
  94:	21 01       	movw	r4, r2
  96:	2e 01       	movw	r4, r28
  98:	3d 01       	movw	r6, r26
  9a:	56 01       	movw	r10, r12
  9c:	68 01       	movw	r12, r16
  9e:	7a 01       	movw	r14, r20
  a0:	8c 01       	movw	r16, r24
  a2:	9e 01       	movw	r18, r28
  a4:	b0 01       	movw	r22, r0
  a6:	c6 01       	movw	r24, r12
  a8:	e6 01       	movw	r28, r12
  aa:	f8 01       	movw	r30, r16
  ac:	0a 02       	muls	r16, r26
  ae:	1c 02       	muls	r17, r28
  b0:	2e 02       	muls	r18, r30
  b2:	40 02       	muls	r20, r16
  b4:	56 02       	muls	r21, r22
  b6:	90 02       	muls	r25, r16
  b8:	9d 02       	muls	r25, r29
  ba:	aa 02       	muls	r26, r26
  bc:	b7 02       	muls	r27, r23
  be:	c4 02       	muls	r28, r20
  c0:	d1 02       	muls	r29, r17
  c2:	e0 02       	muls	r30, r16
  c4:	fb 02       	muls	r31, r27
  c6:	09 03       	fmul	r16, r17
  c8:	17 03       	mulsu	r17, r23
  ca:	25 03       	mulsu	r18, r21
  cc:	33 03       	mulsu	r19, r19
  ce:	41 03       	mulsu	r20, r17
  d0:	51 03       	mulsu	r21, r17

000000d2 <__ctors_end>:
  d2:	11 24       	eor	r1, r1
  d4:	1f be       	out	0x3f, r1	; 63
  d6:	cf ef       	ldi	r28, 0xFF	; 255
  d8:	d0 e1       	ldi	r29, 0x10	; 16
  da:	de bf       	out	0x3e, r29	; 62
  dc:	cd bf       	out	0x3d, r28	; 61

000000de <__do_copy_data>:
  de:	11 e0       	ldi	r17, 0x01	; 1
  e0:	a0 e0       	ldi	r26, 0x00	; 0
  e2:	b1 e0       	ldi	r27, 0x01	; 1
  e4:	ec eb       	ldi	r30, 0xBC	; 188
  e6:	fb e0       	ldi	r31, 0x0B	; 11
  e8:	00 e0       	ldi	r16, 0x00	; 0
  ea:	0b bf       	out	0x3b, r16	; 59
  ec:	02 c0       	rjmp	.+4      	; 0xf2 <__do_copy_data+0x14>
  ee:	07 90       	elpm	r0, Z+
  f0:	0d 92       	st	X+, r0
  f2:	a6 33       	cpi	r26, 0x36	; 54
  f4:	b1 07       	cpc	r27, r17
  f6:	d9 f7       	brne	.-10     	; 0xee <__do_copy_data+0x10>

000000f8 <__do_clear_bss>:
  f8:	21 e0       	ldi	r18, 0x01	; 1
  fa:	a6 e3       	ldi	r26, 0x36	; 54
  fc:	b1 e0       	ldi	r27, 0x01	; 1
  fe:	01 c0       	rjmp	.+2      	; 0x102 <.do_clear_bss_start>

00000100 <.do_clear_bss_loop>:
 100:	1d 92       	st	X+, r1

00000102 <.do_clear_bss_start>:
 102:	ae 33       	cpi	r26, 0x3E	; 62
 104:	b2 07       	cpc	r27, r18
 106:	e1 f7       	brne	.-8      	; 0x100 <.do_clear_bss_loop>
 108:	02 d0       	rcall	.+4      	; 0x10e <main>
 10a:	56 c5       	rjmp	.+2732   	; 0xbb8 <_exit>

0000010c <__bad_interrupt>:
 10c:	79 cf       	rjmp	.-270    	; 0x0 <__vectors>

0000010e <main>:
#include "Sensors.h"
#include "LCD.h"

int main(void)
{
   DIO_Init();
 10e:	e4 d1       	rcall	.+968    	; 0x4d8 <DIO_Init>
   LCD_Init();
 110:	7e d3       	rcall	.+1788   	; 0x80e <LCD_Init>
 112:	66 e0       	ldi	r22, 0x06	; 6
   ADC_Init(REF_VCC,ADC_SCALER_64);
 114:	80 e0       	ldi	r24, 0x00	; 0
 116:	28 d0       	rcall	.+80     	; 0x168 <ADC_Init>
	u16 temperature,pressure,password;
    while (1) 
    {
		temperature=Temp_Read();
 118:	33 d4       	rcall	.+2150   	; 0x980 <Temp_Read>
 11a:	8c 01       	movw	r16, r24
		LCD_GoTo(1,2);
 11c:	62 e0       	ldi	r22, 0x02	; 2
 11e:	81 e0       	ldi	r24, 0x01	; 1
 120:	a8 d3       	rcall	.+1872   	; 0x872 <LCD_GoTo>
		LCD_WriteNumber(temperature/10);
 122:	98 01       	movw	r18, r16
 124:	ad ec       	ldi	r26, 0xCD	; 205
 126:	bc ec       	ldi	r27, 0xCC	; 204
 128:	38 d5       	rcall	.+2672   	; 0xb9a <__umulhisi3>
 12a:	ec 01       	movw	r28, r24
 12c:	d6 95       	lsr	r29
 12e:	c7 95       	ror	r28
 130:	d6 95       	lsr	r29
 132:	c7 95       	ror	r28
 134:	d6 95       	lsr	r29
 136:	c7 95       	ror	r28
 138:	be 01       	movw	r22, r28
 13a:	80 e0       	ldi	r24, 0x00	; 0
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	a8 d3       	rcall	.+1872   	; 0x890 <LCD_WriteNumber>
		LCD_Writechar('.');
 140:	8e e2       	ldi	r24, 0x2E	; 46
 142:	a4 d3       	rcall	.+1864   	; 0x88c <LCD_Writechar>
 144:	ce 01       	movw	r24, r28
		LCD_WriteNumber(temperature%10);
 146:	88 0f       	add	r24, r24
 148:	99 1f       	adc	r25, r25
 14a:	cc 0f       	add	r28, r28
 14c:	dd 1f       	adc	r29, r29
 14e:	cc 0f       	add	r28, r28
 150:	dd 1f       	adc	r29, r29
 152:	cc 0f       	add	r28, r28
 154:	dd 1f       	adc	r29, r29
 156:	c8 0f       	add	r28, r24
 158:	d9 1f       	adc	r29, r25
 15a:	b8 01       	movw	r22, r16
 15c:	6c 1b       	sub	r22, r28
 15e:	7d 0b       	sbc	r23, r29
 160:	80 e0       	ldi	r24, 0x00	; 0
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	95 d3       	rcall	.+1834   	; 0x890 <LCD_WriteNumber>
 166:	d8 cf       	rjmp	.-80     	; 0x118 <main+0xa>

00000168 <ADC_Init>:
u8 static READ_Flag=0;

void ADC_Init(ADC_Ref_type vref,ADC_Scalar_type scaler)
{
    // select v ref
	switch(vref)
 168:	81 30       	cpi	r24, 0x01	; 1
 16a:	39 f0       	breq	.+14     	; 0x17a <ADC_Init+0x12>
 16c:	18 f0       	brcs	.+6      	; 0x174 <ADC_Init+0xc>
 16e:	82 30       	cpi	r24, 0x02	; 2
 170:	39 f0       	breq	.+14     	; 0x180 <ADC_Init+0x18>
 172:	08 c0       	rjmp	.+16     	; 0x184 <ADC_Init+0x1c>
	{
		
	case REF_VCC:
	SET_BIT(ADMUX,REFS0);
 174:	3e 9a       	sbi	0x07, 6	; 7
	CLEAR_BIT(ADMUX,REFS1);
 176:	3f 98       	cbi	0x07, 7	; 7
	break;
 178:	05 c0       	rjmp	.+10     	; 0x184 <ADC_Init+0x1c>
	case REF_AREF:
	CLEAR_BIT(ADMUX,REFS0);
 17a:	3e 98       	cbi	0x07, 6	; 7
	CLEAR_BIT(ADMUX,REFS1);
 17c:	3f 98       	cbi	0x07, 7	; 7
	break;
 17e:	02 c0       	rjmp	.+4      	; 0x184 <ADC_Init+0x1c>
	case RE_256V :
	SET_BIT(ADMUX,REFS0);
 180:	3e 9a       	sbi	0x07, 6	; 7
	SET_BIT(ADMUX,REFS1);
 182:	3f 9a       	sbi	0x07, 7	; 7
	break;
	}
	
	//Scaler test
	ADCSRA=ADCSRA & 0XF8;
 184:	86 b1       	in	r24, 0x06	; 6
 186:	88 7f       	andi	r24, 0xF8	; 248
 188:	86 b9       	out	0x06, r24	; 6
	ADCSRA=ADCSRA |scaler;
 18a:	86 b1       	in	r24, 0x06	; 6
 18c:	68 2b       	or	r22, r24
 18e:	66 b9       	out	0x06, r22	; 6
	
	// enable 
	SET_BIT(ADCSRA,ADEN);  // we write it at the end of the function ,because if we write it at the start of the fun ADC will operate with the previous features 
 190:	37 9a       	sbi	0x06, 7	; 6
 192:	08 95       	ret

00000194 <ADC_Read>:

}
u16 ADC_Read(ADC_Channel_type ch)
{
	//select channel
	ADMUX=ADMUX&0XE0;  //0b11100000
 194:	97 b1       	in	r25, 0x07	; 7
 196:	90 7e       	andi	r25, 0xE0	; 224
 198:	97 b9       	out	0x07, r25	; 7
	ADMUX=ADMUX|ch;
 19a:	97 b1       	in	r25, 0x07	; 7
 19c:	89 2b       	or	r24, r25
 19e:	87 b9       	out	0x07, r24	; 7
	
	//start conversion
	SET_BIT(ADCSRA,ADSC);
 1a0:	36 9a       	sbi	0x06, 6	; 6
	while((READ_BIT(ADCSRA,ADSC))); //POLLING till the end of conversion //busy wait
 1a2:	36 99       	sbic	0x06, 6	; 6
 1a4:	fe cf       	rjmp	.-4      	; 0x1a2 <ADC_Read+0xe>
	
	
	return ADC;
 1a6:	84 b1       	in	r24, 0x04	; 4
 1a8:	95 b1       	in	r25, 0x05	; 5
} 
 1aa:	08 95       	ret

000001ac <DIO_Initpin>:
 }

 void DIO_Initpin(DIO_Pin_type pin,DIO_Pinstastus_type status)
 {
	 
	 DIO_Port_type PORT=pin/8;
 1ac:	e8 2f       	mov	r30, r24
 1ae:	e6 95       	lsr	r30
 1b0:	e6 95       	lsr	r30
 1b2:	e6 95       	lsr	r30
	 u8 pin_num=pin%8;
 1b4:	87 70       	andi	r24, 0x07	; 7
	 switch(status)
 1b6:	61 30       	cpi	r22, 0x01	; 1
 1b8:	09 f4       	brne	.+2      	; 0x1bc <DIO_Initpin+0x10>
 1ba:	6e c0       	rjmp	.+220    	; 0x298 <DIO_Initpin+0xec>
 1bc:	20 f0       	brcs	.+8      	; 0x1c6 <DIO_Initpin+0x1a>
 1be:	62 30       	cpi	r22, 0x02	; 2
 1c0:	09 f4       	brne	.+2      	; 0x1c4 <DIO_Initpin+0x18>
 1c2:	fa c0       	rjmp	.+500    	; 0x3b8 <DIO_Initpin+0x20c>
 1c4:	08 95       	ret
	 {
		 case OUTPUT:
		 switch(PORT)
 1c6:	4e 2f       	mov	r20, r30
 1c8:	50 e0       	ldi	r21, 0x00	; 0
 1ca:	47 30       	cpi	r20, 0x07	; 7
 1cc:	51 05       	cpc	r21, r1
 1ce:	08 f0       	brcs	.+2      	; 0x1d2 <DIO_Initpin+0x26>
 1d0:	82 c1       	rjmp	.+772    	; 0x4d6 <__LOCK_REGION_LENGTH__+0xd6>
 1d2:	fa 01       	movw	r30, r20
 1d4:	ea 5b       	subi	r30, 0xBA	; 186
 1d6:	ff 4f       	sbci	r31, 0xFF	; 255
 1d8:	d7 c4       	rjmp	.+2478   	; 0xb88 <__tablejump2__>
		 {
			 case PA:
			 SET_BIT(DDRA,pin_num);
 1da:	4a b3       	in	r20, 0x1a	; 26
 1dc:	21 e0       	ldi	r18, 0x01	; 1
 1de:	30 e0       	ldi	r19, 0x00	; 0
 1e0:	b9 01       	movw	r22, r18
 1e2:	02 c0       	rjmp	.+4      	; 0x1e8 <DIO_Initpin+0x3c>
 1e4:	66 0f       	add	r22, r22
 1e6:	77 1f       	adc	r23, r23
 1e8:	8a 95       	dec	r24
 1ea:	e2 f7       	brpl	.-8      	; 0x1e4 <DIO_Initpin+0x38>
 1ec:	cb 01       	movw	r24, r22
 1ee:	84 2b       	or	r24, r20
 1f0:	8a bb       	out	0x1a, r24	; 26
			 break;
 1f2:	08 95       	ret
			 case PB:
			 SET_BIT(DDRB,pin_num);
 1f4:	47 b3       	in	r20, 0x17	; 23
 1f6:	21 e0       	ldi	r18, 0x01	; 1
 1f8:	30 e0       	ldi	r19, 0x00	; 0
 1fa:	b9 01       	movw	r22, r18
 1fc:	02 c0       	rjmp	.+4      	; 0x202 <DIO_Initpin+0x56>
 1fe:	66 0f       	add	r22, r22
 200:	77 1f       	adc	r23, r23
 202:	8a 95       	dec	r24
 204:	e2 f7       	brpl	.-8      	; 0x1fe <DIO_Initpin+0x52>
 206:	cb 01       	movw	r24, r22
 208:	84 2b       	or	r24, r20
 20a:	87 bb       	out	0x17, r24	; 23
			 break;
 20c:	08 95       	ret
			 case PC:
			 SET_BIT(DDRC,pin_num);
 20e:	44 b3       	in	r20, 0x14	; 20
 210:	21 e0       	ldi	r18, 0x01	; 1
 212:	30 e0       	ldi	r19, 0x00	; 0
 214:	b9 01       	movw	r22, r18
 216:	02 c0       	rjmp	.+4      	; 0x21c <DIO_Initpin+0x70>
 218:	66 0f       	add	r22, r22
 21a:	77 1f       	adc	r23, r23
 21c:	8a 95       	dec	r24
 21e:	e2 f7       	brpl	.-8      	; 0x218 <DIO_Initpin+0x6c>
 220:	cb 01       	movw	r24, r22
 222:	84 2b       	or	r24, r20
 224:	84 bb       	out	0x14, r24	; 20
			 break;
 226:	08 95       	ret
			 case PD:
			 SET_BIT(DDRD,pin_num);
 228:	41 b3       	in	r20, 0x11	; 17
 22a:	21 e0       	ldi	r18, 0x01	; 1
 22c:	30 e0       	ldi	r19, 0x00	; 0
 22e:	b9 01       	movw	r22, r18
 230:	02 c0       	rjmp	.+4      	; 0x236 <DIO_Initpin+0x8a>
 232:	66 0f       	add	r22, r22
 234:	77 1f       	adc	r23, r23
 236:	8a 95       	dec	r24
 238:	e2 f7       	brpl	.-8      	; 0x232 <DIO_Initpin+0x86>
 23a:	cb 01       	movw	r24, r22
 23c:	84 2b       	or	r24, r20
 23e:	81 bb       	out	0x11, r24	; 17
			 break;
 240:	08 95       	ret
			 case PE:
			 SET_BIT(DDRE,pin_num);
 242:	42 b1       	in	r20, 0x02	; 2
 244:	21 e0       	ldi	r18, 0x01	; 1
 246:	30 e0       	ldi	r19, 0x00	; 0
 248:	b9 01       	movw	r22, r18
 24a:	02 c0       	rjmp	.+4      	; 0x250 <DIO_Initpin+0xa4>
 24c:	66 0f       	add	r22, r22
 24e:	77 1f       	adc	r23, r23
 250:	8a 95       	dec	r24
 252:	e2 f7       	brpl	.-8      	; 0x24c <DIO_Initpin+0xa0>
 254:	cb 01       	movw	r24, r22
 256:	84 2b       	or	r24, r20
 258:	82 b9       	out	0x02, r24	; 2
			 break;
 25a:	08 95       	ret
			 case PF:
			 SET_BIT(DDRF,pin_num);
 25c:	e1 e6       	ldi	r30, 0x61	; 97
 25e:	f0 e0       	ldi	r31, 0x00	; 0
 260:	40 81       	ld	r20, Z
 262:	21 e0       	ldi	r18, 0x01	; 1
 264:	30 e0       	ldi	r19, 0x00	; 0
 266:	b9 01       	movw	r22, r18
 268:	02 c0       	rjmp	.+4      	; 0x26e <DIO_Initpin+0xc2>
 26a:	66 0f       	add	r22, r22
 26c:	77 1f       	adc	r23, r23
 26e:	8a 95       	dec	r24
 270:	e2 f7       	brpl	.-8      	; 0x26a <DIO_Initpin+0xbe>
 272:	cb 01       	movw	r24, r22
 274:	84 2b       	or	r24, r20
 276:	80 83       	st	Z, r24
			 break;
 278:	08 95       	ret
			 case PG:
			 SET_BIT(DDRG,pin_num);
 27a:	e4 e6       	ldi	r30, 0x64	; 100
 27c:	f0 e0       	ldi	r31, 0x00	; 0
 27e:	40 81       	ld	r20, Z
 280:	21 e0       	ldi	r18, 0x01	; 1
 282:	30 e0       	ldi	r19, 0x00	; 0
 284:	b9 01       	movw	r22, r18
 286:	02 c0       	rjmp	.+4      	; 0x28c <DIO_Initpin+0xe0>
 288:	66 0f       	add	r22, r22
 28a:	77 1f       	adc	r23, r23
 28c:	8a 95       	dec	r24
 28e:	e2 f7       	brpl	.-8      	; 0x288 <DIO_Initpin+0xdc>
 290:	cb 01       	movw	r24, r22
 292:	84 2b       	or	r24, r20
 294:	80 83       	st	Z, r24
			 break;
 296:	08 95       	ret
			 
		 }
		 break;
		 
		 case INFREE:
		 switch(PORT)
 298:	4e 2f       	mov	r20, r30
 29a:	50 e0       	ldi	r21, 0x00	; 0
 29c:	47 30       	cpi	r20, 0x07	; 7
 29e:	51 05       	cpc	r21, r1
 2a0:	08 f0       	brcs	.+2      	; 0x2a4 <DIO_Initpin+0xf8>
 2a2:	19 c1       	rjmp	.+562    	; 0x4d6 <__LOCK_REGION_LENGTH__+0xd6>
 2a4:	fa 01       	movw	r30, r20
 2a6:	e3 5b       	subi	r30, 0xB3	; 179
 2a8:	ff 4f       	sbci	r31, 0xFF	; 255
 2aa:	6e c4       	rjmp	.+2268   	; 0xb88 <__tablejump2__>
		 {
			 case PA:
			 CLEAR_BIT(DDRA,pin_num);
 2ac:	4a b3       	in	r20, 0x1a	; 26
 2ae:	21 e0       	ldi	r18, 0x01	; 1
 2b0:	30 e0       	ldi	r19, 0x00	; 0
 2b2:	b9 01       	movw	r22, r18
 2b4:	02 c0       	rjmp	.+4      	; 0x2ba <DIO_Initpin+0x10e>
 2b6:	66 0f       	add	r22, r22
 2b8:	77 1f       	adc	r23, r23
 2ba:	8a 95       	dec	r24
 2bc:	e2 f7       	brpl	.-8      	; 0x2b6 <DIO_Initpin+0x10a>
 2be:	cb 01       	movw	r24, r22
 2c0:	80 95       	com	r24
 2c2:	94 2f       	mov	r25, r20
 2c4:	98 23       	and	r25, r24
 2c6:	9a bb       	out	0x1a, r25	; 26
			 CLEAR_BIT(PORTA,pin_num);
 2c8:	9b b3       	in	r25, 0x1b	; 27
 2ca:	89 23       	and	r24, r25
 2cc:	8b bb       	out	0x1b, r24	; 27
			 break;
 2ce:	08 95       	ret
			 
			 case PB:
			 CLEAR_BIT(DDRB,pin_num);
 2d0:	47 b3       	in	r20, 0x17	; 23
 2d2:	21 e0       	ldi	r18, 0x01	; 1
 2d4:	30 e0       	ldi	r19, 0x00	; 0
 2d6:	b9 01       	movw	r22, r18
 2d8:	02 c0       	rjmp	.+4      	; 0x2de <DIO_Initpin+0x132>
 2da:	66 0f       	add	r22, r22
 2dc:	77 1f       	adc	r23, r23
 2de:	8a 95       	dec	r24
 2e0:	e2 f7       	brpl	.-8      	; 0x2da <DIO_Initpin+0x12e>
 2e2:	cb 01       	movw	r24, r22
 2e4:	80 95       	com	r24
 2e6:	94 2f       	mov	r25, r20
 2e8:	98 23       	and	r25, r24
 2ea:	97 bb       	out	0x17, r25	; 23
			 CLEAR_BIT(PORTB,pin_num);
 2ec:	98 b3       	in	r25, 0x18	; 24
 2ee:	89 23       	and	r24, r25
 2f0:	88 bb       	out	0x18, r24	; 24
			 break;
 2f2:	08 95       	ret
			 
			 case PC:
			 CLEAR_BIT(DDRC,pin_num);
 2f4:	44 b3       	in	r20, 0x14	; 20
 2f6:	21 e0       	ldi	r18, 0x01	; 1
 2f8:	30 e0       	ldi	r19, 0x00	; 0
 2fa:	b9 01       	movw	r22, r18
 2fc:	02 c0       	rjmp	.+4      	; 0x302 <DIO_Initpin+0x156>
 2fe:	66 0f       	add	r22, r22
 300:	77 1f       	adc	r23, r23
 302:	8a 95       	dec	r24
 304:	e2 f7       	brpl	.-8      	; 0x2fe <DIO_Initpin+0x152>
 306:	cb 01       	movw	r24, r22
 308:	80 95       	com	r24
 30a:	94 2f       	mov	r25, r20
 30c:	98 23       	and	r25, r24
 30e:	94 bb       	out	0x14, r25	; 20
			 CLEAR_BIT(PORTC,pin_num);
 310:	95 b3       	in	r25, 0x15	; 21
 312:	89 23       	and	r24, r25
 314:	85 bb       	out	0x15, r24	; 21
			 break;
 316:	08 95       	ret
			 
			 case PD:
			 CLEAR_BIT(DDRD,pin_num);
 318:	41 b3       	in	r20, 0x11	; 17
 31a:	21 e0       	ldi	r18, 0x01	; 1
 31c:	30 e0       	ldi	r19, 0x00	; 0
 31e:	b9 01       	movw	r22, r18
 320:	02 c0       	rjmp	.+4      	; 0x326 <DIO_Initpin+0x17a>
 322:	66 0f       	add	r22, r22
 324:	77 1f       	adc	r23, r23
 326:	8a 95       	dec	r24
 328:	e2 f7       	brpl	.-8      	; 0x322 <DIO_Initpin+0x176>
 32a:	cb 01       	movw	r24, r22
 32c:	80 95       	com	r24
 32e:	94 2f       	mov	r25, r20
 330:	98 23       	and	r25, r24
 332:	91 bb       	out	0x11, r25	; 17
			 CLEAR_BIT(PORTD,pin_num);
 334:	92 b3       	in	r25, 0x12	; 18
 336:	89 23       	and	r24, r25
 338:	82 bb       	out	0x12, r24	; 18
			 break;
 33a:	08 95       	ret
			 
			 case PE:
			 CLEAR_BIT(DDRE,pin_num);
 33c:	42 b1       	in	r20, 0x02	; 2
 33e:	21 e0       	ldi	r18, 0x01	; 1
 340:	30 e0       	ldi	r19, 0x00	; 0
 342:	b9 01       	movw	r22, r18
 344:	02 c0       	rjmp	.+4      	; 0x34a <DIO_Initpin+0x19e>
 346:	66 0f       	add	r22, r22
 348:	77 1f       	adc	r23, r23
 34a:	8a 95       	dec	r24
 34c:	e2 f7       	brpl	.-8      	; 0x346 <DIO_Initpin+0x19a>
 34e:	cb 01       	movw	r24, r22
 350:	80 95       	com	r24
 352:	94 2f       	mov	r25, r20
 354:	98 23       	and	r25, r24
 356:	92 b9       	out	0x02, r25	; 2
		     CLEAR_BIT(PORTE,pin_num);
 358:	93 b1       	in	r25, 0x03	; 3
 35a:	89 23       	and	r24, r25
 35c:	83 b9       	out	0x03, r24	; 3
		     break;
 35e:	08 95       	ret
			 
			 case PF:
		     CLEAR_BIT(DDRF,pin_num);
 360:	e1 e6       	ldi	r30, 0x61	; 97
 362:	f0 e0       	ldi	r31, 0x00	; 0
 364:	40 81       	ld	r20, Z
 366:	21 e0       	ldi	r18, 0x01	; 1
 368:	30 e0       	ldi	r19, 0x00	; 0
 36a:	b9 01       	movw	r22, r18
 36c:	02 c0       	rjmp	.+4      	; 0x372 <DIO_Initpin+0x1c6>
 36e:	66 0f       	add	r22, r22
 370:	77 1f       	adc	r23, r23
 372:	8a 95       	dec	r24
 374:	e2 f7       	brpl	.-8      	; 0x36e <DIO_Initpin+0x1c2>
 376:	cb 01       	movw	r24, r22
 378:	80 95       	com	r24
 37a:	94 2f       	mov	r25, r20
 37c:	98 23       	and	r25, r24
 37e:	90 83       	st	Z, r25
		     CLEAR_BIT(PORTF,pin_num);
 380:	e2 e6       	ldi	r30, 0x62	; 98
 382:	f0 e0       	ldi	r31, 0x00	; 0
 384:	90 81       	ld	r25, Z
 386:	89 23       	and	r24, r25
 388:	80 83       	st	Z, r24
		     break;
 38a:	08 95       	ret
			 
			 case PG:
			 CLEAR_BIT(DDRG,pin_num);
 38c:	e4 e6       	ldi	r30, 0x64	; 100
 38e:	f0 e0       	ldi	r31, 0x00	; 0
 390:	40 81       	ld	r20, Z
 392:	21 e0       	ldi	r18, 0x01	; 1
 394:	30 e0       	ldi	r19, 0x00	; 0
 396:	b9 01       	movw	r22, r18
 398:	02 c0       	rjmp	.+4      	; 0x39e <DIO_Initpin+0x1f2>
 39a:	66 0f       	add	r22, r22
 39c:	77 1f       	adc	r23, r23
 39e:	8a 95       	dec	r24
 3a0:	e2 f7       	brpl	.-8      	; 0x39a <DIO_Initpin+0x1ee>
 3a2:	cb 01       	movw	r24, r22
 3a4:	80 95       	com	r24
 3a6:	94 2f       	mov	r25, r20
 3a8:	98 23       	and	r25, r24
 3aa:	90 83       	st	Z, r25
			 CLEAR_BIT(PORTG,pin_num);
 3ac:	e5 e6       	ldi	r30, 0x65	; 101
 3ae:	f0 e0       	ldi	r31, 0x00	; 0
 3b0:	90 81       	ld	r25, Z
 3b2:	89 23       	and	r24, r25
 3b4:	80 83       	st	Z, r24
			 break;
 3b6:	08 95       	ret
		 }
		 break;
		 
		 case INPULL:
		 switch(PORT)
 3b8:	4e 2f       	mov	r20, r30
 3ba:	50 e0       	ldi	r21, 0x00	; 0
 3bc:	47 30       	cpi	r20, 0x07	; 7
 3be:	51 05       	cpc	r21, r1
 3c0:	08 f0       	brcs	.+2      	; 0x3c4 <DIO_Initpin+0x218>
 3c2:	89 c0       	rjmp	.+274    	; 0x4d6 <__LOCK_REGION_LENGTH__+0xd6>
 3c4:	fa 01       	movw	r30, r20
 3c6:	ec 5a       	subi	r30, 0xAC	; 172
 3c8:	ff 4f       	sbci	r31, 0xFF	; 255
 3ca:	de c3       	rjmp	.+1980   	; 0xb88 <__tablejump2__>
		 {
			 case PA:
			 CLEAR_BIT(DDRA,pin_num);
 3cc:	4a b3       	in	r20, 0x1a	; 26
 3ce:	21 e0       	ldi	r18, 0x01	; 1
 3d0:	30 e0       	ldi	r19, 0x00	; 0
 3d2:	b9 01       	movw	r22, r18
 3d4:	02 c0       	rjmp	.+4      	; 0x3da <DIO_Initpin+0x22e>
 3d6:	66 0f       	add	r22, r22
 3d8:	77 1f       	adc	r23, r23
 3da:	8a 95       	dec	r24
 3dc:	e2 f7       	brpl	.-8      	; 0x3d6 <DIO_Initpin+0x22a>
 3de:	cb 01       	movw	r24, r22
 3e0:	96 2f       	mov	r25, r22
 3e2:	90 95       	com	r25
 3e4:	94 23       	and	r25, r20
 3e6:	9a bb       	out	0x1a, r25	; 26
			 SET_BIT(PORTA,pin_num);
 3e8:	9b b3       	in	r25, 0x1b	; 27
 3ea:	89 2b       	or	r24, r25
 3ec:	8b bb       	out	0x1b, r24	; 27
			 break;
 3ee:	08 95       	ret
			 
			 case PB:
			 CLEAR_BIT(DDRB,pin_num);
 3f0:	47 b3       	in	r20, 0x17	; 23
 3f2:	21 e0       	ldi	r18, 0x01	; 1
 3f4:	30 e0       	ldi	r19, 0x00	; 0
 3f6:	b9 01       	movw	r22, r18
 3f8:	02 c0       	rjmp	.+4      	; 0x3fe <DIO_Initpin+0x252>
 3fa:	66 0f       	add	r22, r22
 3fc:	77 1f       	adc	r23, r23
 3fe:	8a 95       	dec	r24
 400:	e2 f7       	brpl	.-8      	; 0x3fa <DIO_Initpin+0x24e>
 402:	cb 01       	movw	r24, r22
 404:	96 2f       	mov	r25, r22
 406:	90 95       	com	r25
 408:	94 23       	and	r25, r20
 40a:	97 bb       	out	0x17, r25	; 23
			 SET_BIT(PORTB,pin_num);
 40c:	98 b3       	in	r25, 0x18	; 24
 40e:	89 2b       	or	r24, r25
 410:	88 bb       	out	0x18, r24	; 24
			 break;
 412:	08 95       	ret
			 
			 case PC:
			 CLEAR_BIT(DDRC,pin_num);
 414:	44 b3       	in	r20, 0x14	; 20
 416:	21 e0       	ldi	r18, 0x01	; 1
 418:	30 e0       	ldi	r19, 0x00	; 0
 41a:	b9 01       	movw	r22, r18
 41c:	02 c0       	rjmp	.+4      	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
 41e:	66 0f       	add	r22, r22
 420:	77 1f       	adc	r23, r23
 422:	8a 95       	dec	r24
 424:	e2 f7       	brpl	.-8      	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
 426:	cb 01       	movw	r24, r22
 428:	96 2f       	mov	r25, r22
 42a:	90 95       	com	r25
 42c:	94 23       	and	r25, r20
 42e:	94 bb       	out	0x14, r25	; 20
			 SET_BIT(PORTC,pin_num);
 430:	95 b3       	in	r25, 0x15	; 21
 432:	89 2b       	or	r24, r25
 434:	85 bb       	out	0x15, r24	; 21
			 break;
 436:	08 95       	ret
			 
			 case PD:
			 CLEAR_BIT(DDRD,pin_num);
 438:	41 b3       	in	r20, 0x11	; 17
 43a:	21 e0       	ldi	r18, 0x01	; 1
 43c:	30 e0       	ldi	r19, 0x00	; 0
 43e:	b9 01       	movw	r22, r18
 440:	02 c0       	rjmp	.+4      	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
 442:	66 0f       	add	r22, r22
 444:	77 1f       	adc	r23, r23
 446:	8a 95       	dec	r24
 448:	e2 f7       	brpl	.-8      	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
 44a:	cb 01       	movw	r24, r22
 44c:	96 2f       	mov	r25, r22
 44e:	90 95       	com	r25
 450:	94 23       	and	r25, r20
 452:	91 bb       	out	0x11, r25	; 17
			 SET_BIT(PORTD,pin_num);
 454:	92 b3       	in	r25, 0x12	; 18
 456:	89 2b       	or	r24, r25
 458:	82 bb       	out	0x12, r24	; 18
			 break;
 45a:	08 95       	ret
			 
			 case PE:
			 CLEAR_BIT(DDRE,pin_num);
 45c:	42 b1       	in	r20, 0x02	; 2
 45e:	21 e0       	ldi	r18, 0x01	; 1
 460:	30 e0       	ldi	r19, 0x00	; 0
 462:	b9 01       	movw	r22, r18
 464:	02 c0       	rjmp	.+4      	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
 466:	66 0f       	add	r22, r22
 468:	77 1f       	adc	r23, r23
 46a:	8a 95       	dec	r24
 46c:	e2 f7       	brpl	.-8      	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
 46e:	cb 01       	movw	r24, r22
 470:	96 2f       	mov	r25, r22
 472:	90 95       	com	r25
 474:	94 23       	and	r25, r20
 476:	92 b9       	out	0x02, r25	; 2
			 SET_BIT(PORTE,pin_num);
 478:	93 b1       	in	r25, 0x03	; 3
 47a:	89 2b       	or	r24, r25
 47c:	83 b9       	out	0x03, r24	; 3
			 break;
 47e:	08 95       	ret
			 
			 case PF:
			 CLEAR_BIT(DDRF,pin_num);
 480:	e1 e6       	ldi	r30, 0x61	; 97
 482:	f0 e0       	ldi	r31, 0x00	; 0
 484:	40 81       	ld	r20, Z
 486:	21 e0       	ldi	r18, 0x01	; 1
 488:	30 e0       	ldi	r19, 0x00	; 0
 48a:	b9 01       	movw	r22, r18
 48c:	02 c0       	rjmp	.+4      	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
 48e:	66 0f       	add	r22, r22
 490:	77 1f       	adc	r23, r23
 492:	8a 95       	dec	r24
 494:	e2 f7       	brpl	.-8      	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
 496:	cb 01       	movw	r24, r22
 498:	96 2f       	mov	r25, r22
 49a:	90 95       	com	r25
 49c:	94 23       	and	r25, r20
 49e:	90 83       	st	Z, r25
			 SET_BIT(PORTF,pin_num);
 4a0:	e2 e6       	ldi	r30, 0x62	; 98
 4a2:	f0 e0       	ldi	r31, 0x00	; 0
 4a4:	90 81       	ld	r25, Z
 4a6:	89 2b       	or	r24, r25
 4a8:	80 83       	st	Z, r24
			 break;
 4aa:	08 95       	ret
			 
			 case PG:
			 CLEAR_BIT(DDRG,pin_num);
 4ac:	e4 e6       	ldi	r30, 0x64	; 100
 4ae:	f0 e0       	ldi	r31, 0x00	; 0
 4b0:	40 81       	ld	r20, Z
 4b2:	21 e0       	ldi	r18, 0x01	; 1
 4b4:	30 e0       	ldi	r19, 0x00	; 0
 4b6:	b9 01       	movw	r22, r18
 4b8:	02 c0       	rjmp	.+4      	; 0x4be <__LOCK_REGION_LENGTH__+0xbe>
 4ba:	66 0f       	add	r22, r22
 4bc:	77 1f       	adc	r23, r23
 4be:	8a 95       	dec	r24
 4c0:	e2 f7       	brpl	.-8      	; 0x4ba <__LOCK_REGION_LENGTH__+0xba>
 4c2:	cb 01       	movw	r24, r22
 4c4:	96 2f       	mov	r25, r22
 4c6:	90 95       	com	r25
 4c8:	94 23       	and	r25, r20
 4ca:	90 83       	st	Z, r25
			 SET_BIT(PORTG,pin_num);
 4cc:	e5 e6       	ldi	r30, 0x65	; 101
 4ce:	f0 e0       	ldi	r31, 0x00	; 0
 4d0:	90 81       	ld	r25, Z
 4d2:	89 2b       	or	r24, r25
 4d4:	80 83       	st	Z, r24
 4d6:	08 95       	ret

000004d8 <DIO_Init>:

#include "DIO_Interface.h"
#include "MemMap.h"

 void DIO_Init(void)
 {
 4d8:	0f 93       	push	r16
 4da:	1f 93       	push	r17
 4dc:	cf 93       	push	r28
 4de:	00 e0       	ldi	r16, 0x00	; 0
 4e0:	11 e0       	ldi	r17, 0x01	; 1
	 DIO_Pin_type i;
	 for(i=PINA0;i<TOTAL_PINS;i++)
 4e2:	c0 e0       	ldi	r28, 0x00	; 0
	 DIO_Initpin(i,PinStatus[i]);
 4e4:	f8 01       	movw	r30, r16
 4e6:	61 91       	ld	r22, Z+
 4e8:	8f 01       	movw	r16, r30
 4ea:	8c 2f       	mov	r24, r28
 4ec:	5f de       	rcall	.-834    	; 0x1ac <DIO_Initpin>
#include "MemMap.h"

 void DIO_Init(void)
 {
	 DIO_Pin_type i;
	 for(i=PINA0;i<TOTAL_PINS;i++)
 4ee:	cf 5f       	subi	r28, 0xFF	; 255
 4f0:	c5 33       	cpi	r28, 0x35	; 53
 4f2:	c1 f7       	brne	.-16     	; 0x4e4 <DIO_Init+0xc>
	 DIO_Initpin(i,PinStatus[i]);
 }
 4f4:	cf 91       	pop	r28
 4f6:	1f 91       	pop	r17
 4f8:	0f 91       	pop	r16
 4fa:	08 95       	ret

000004fc <DIO_Writepin>:
	 }	 
 }

 void DIO_Writepin(DIO_Pin_type pin,DIO_Voltagetype volt)
 {
	 DIO_Port_type PORT=pin/8;
 4fc:	e8 2f       	mov	r30, r24
 4fe:	e6 95       	lsr	r30
 500:	e6 95       	lsr	r30
 502:	e6 95       	lsr	r30
	 u8 pin_num=pin%8;
 504:	87 70       	andi	r24, 0x07	; 7
	 if(volt==HIGH)
 506:	61 30       	cpi	r22, 0x01	; 1
 508:	09 f0       	breq	.+2      	; 0x50c <DIO_Writepin+0x10>
 50a:	69 c0       	rjmp	.+210    	; 0x5de <DIO_Writepin+0xe2>
	 {
		 switch(PORT)
 50c:	4e 2f       	mov	r20, r30
 50e:	50 e0       	ldi	r21, 0x00	; 0
 510:	47 30       	cpi	r20, 0x07	; 7
 512:	51 05       	cpc	r21, r1
 514:	08 f0       	brcs	.+2      	; 0x518 <DIO_Writepin+0x1c>
 516:	d4 c0       	rjmp	.+424    	; 0x6c0 <DIO_Writepin+0x1c4>
 518:	fa 01       	movw	r30, r20
 51a:	e5 5a       	subi	r30, 0xA5	; 165
 51c:	ff 4f       	sbci	r31, 0xFF	; 255
 51e:	34 c3       	rjmp	.+1640   	; 0xb88 <__tablejump2__>
		 {
			 case PA:
			 SET_BIT(PORTA,pin_num);
 520:	4b b3       	in	r20, 0x1b	; 27
 522:	21 e0       	ldi	r18, 0x01	; 1
 524:	30 e0       	ldi	r19, 0x00	; 0
 526:	b9 01       	movw	r22, r18
 528:	02 c0       	rjmp	.+4      	; 0x52e <DIO_Writepin+0x32>
 52a:	66 0f       	add	r22, r22
 52c:	77 1f       	adc	r23, r23
 52e:	8a 95       	dec	r24
 530:	e2 f7       	brpl	.-8      	; 0x52a <DIO_Writepin+0x2e>
 532:	cb 01       	movw	r24, r22
 534:	84 2b       	or	r24, r20
 536:	8b bb       	out	0x1b, r24	; 27
			 break;
 538:	08 95       	ret
			 case PB:
			 SET_BIT(PORTB,pin_num);
 53a:	48 b3       	in	r20, 0x18	; 24
 53c:	21 e0       	ldi	r18, 0x01	; 1
 53e:	30 e0       	ldi	r19, 0x00	; 0
 540:	b9 01       	movw	r22, r18
 542:	02 c0       	rjmp	.+4      	; 0x548 <DIO_Writepin+0x4c>
 544:	66 0f       	add	r22, r22
 546:	77 1f       	adc	r23, r23
 548:	8a 95       	dec	r24
 54a:	e2 f7       	brpl	.-8      	; 0x544 <DIO_Writepin+0x48>
 54c:	cb 01       	movw	r24, r22
 54e:	84 2b       	or	r24, r20
 550:	88 bb       	out	0x18, r24	; 24
			 break;
 552:	08 95       	ret
			 case PC:
			 SET_BIT(PORTC,pin_num);
 554:	45 b3       	in	r20, 0x15	; 21
 556:	21 e0       	ldi	r18, 0x01	; 1
 558:	30 e0       	ldi	r19, 0x00	; 0
 55a:	b9 01       	movw	r22, r18
 55c:	02 c0       	rjmp	.+4      	; 0x562 <DIO_Writepin+0x66>
 55e:	66 0f       	add	r22, r22
 560:	77 1f       	adc	r23, r23
 562:	8a 95       	dec	r24
 564:	e2 f7       	brpl	.-8      	; 0x55e <DIO_Writepin+0x62>
 566:	cb 01       	movw	r24, r22
 568:	84 2b       	or	r24, r20
 56a:	85 bb       	out	0x15, r24	; 21
			 break;
 56c:	08 95       	ret
			 case PD:
			 SET_BIT(PORTD,pin_num);
 56e:	42 b3       	in	r20, 0x12	; 18
 570:	21 e0       	ldi	r18, 0x01	; 1
 572:	30 e0       	ldi	r19, 0x00	; 0
 574:	b9 01       	movw	r22, r18
 576:	02 c0       	rjmp	.+4      	; 0x57c <DIO_Writepin+0x80>
 578:	66 0f       	add	r22, r22
 57a:	77 1f       	adc	r23, r23
 57c:	8a 95       	dec	r24
 57e:	e2 f7       	brpl	.-8      	; 0x578 <DIO_Writepin+0x7c>
 580:	cb 01       	movw	r24, r22
 582:	84 2b       	or	r24, r20
 584:	82 bb       	out	0x12, r24	; 18
			 break;
 586:	08 95       	ret
			 case PE:
			 SET_BIT(PORTE,pin_num);
 588:	43 b1       	in	r20, 0x03	; 3
 58a:	21 e0       	ldi	r18, 0x01	; 1
 58c:	30 e0       	ldi	r19, 0x00	; 0
 58e:	b9 01       	movw	r22, r18
 590:	02 c0       	rjmp	.+4      	; 0x596 <DIO_Writepin+0x9a>
 592:	66 0f       	add	r22, r22
 594:	77 1f       	adc	r23, r23
 596:	8a 95       	dec	r24
 598:	e2 f7       	brpl	.-8      	; 0x592 <DIO_Writepin+0x96>
 59a:	cb 01       	movw	r24, r22
 59c:	84 2b       	or	r24, r20
 59e:	83 b9       	out	0x03, r24	; 3
			 break;
 5a0:	08 95       	ret
			 case PF:
			 SET_BIT(PORTF,pin_num);
 5a2:	e2 e6       	ldi	r30, 0x62	; 98
 5a4:	f0 e0       	ldi	r31, 0x00	; 0
 5a6:	40 81       	ld	r20, Z
 5a8:	21 e0       	ldi	r18, 0x01	; 1
 5aa:	30 e0       	ldi	r19, 0x00	; 0
 5ac:	b9 01       	movw	r22, r18
 5ae:	02 c0       	rjmp	.+4      	; 0x5b4 <DIO_Writepin+0xb8>
 5b0:	66 0f       	add	r22, r22
 5b2:	77 1f       	adc	r23, r23
 5b4:	8a 95       	dec	r24
 5b6:	e2 f7       	brpl	.-8      	; 0x5b0 <DIO_Writepin+0xb4>
 5b8:	cb 01       	movw	r24, r22
 5ba:	84 2b       	or	r24, r20
 5bc:	80 83       	st	Z, r24
			 break;
 5be:	08 95       	ret
			 case PG:
			 SET_BIT(PORTG,pin_num);
 5c0:	e5 e6       	ldi	r30, 0x65	; 101
 5c2:	f0 e0       	ldi	r31, 0x00	; 0
 5c4:	40 81       	ld	r20, Z
 5c6:	21 e0       	ldi	r18, 0x01	; 1
 5c8:	30 e0       	ldi	r19, 0x00	; 0
 5ca:	b9 01       	movw	r22, r18
 5cc:	02 c0       	rjmp	.+4      	; 0x5d2 <DIO_Writepin+0xd6>
 5ce:	66 0f       	add	r22, r22
 5d0:	77 1f       	adc	r23, r23
 5d2:	8a 95       	dec	r24
 5d4:	e2 f7       	brpl	.-8      	; 0x5ce <DIO_Writepin+0xd2>
 5d6:	cb 01       	movw	r24, r22
 5d8:	84 2b       	or	r24, r20
 5da:	80 83       	st	Z, r24
			 break;
 5dc:	08 95       	ret
			 
		 }
	 }
	 else if (volt==LOW)
 5de:	61 11       	cpse	r22, r1
 5e0:	6f c0       	rjmp	.+222    	; 0x6c0 <DIO_Writepin+0x1c4>
	 {
		 switch(PORT)
 5e2:	4e 2f       	mov	r20, r30
 5e4:	50 e0       	ldi	r21, 0x00	; 0
 5e6:	47 30       	cpi	r20, 0x07	; 7
 5e8:	51 05       	cpc	r21, r1
 5ea:	08 f0       	brcs	.+2      	; 0x5ee <DIO_Writepin+0xf2>
 5ec:	69 c0       	rjmp	.+210    	; 0x6c0 <DIO_Writepin+0x1c4>
 5ee:	fa 01       	movw	r30, r20
 5f0:	ee 59       	subi	r30, 0x9E	; 158
 5f2:	ff 4f       	sbci	r31, 0xFF	; 255
 5f4:	c9 c2       	rjmp	.+1426   	; 0xb88 <__tablejump2__>
		 {
			 case PA:
			 CLEAR_BIT(PORTA,pin_num);
 5f6:	4b b3       	in	r20, 0x1b	; 27
 5f8:	21 e0       	ldi	r18, 0x01	; 1
 5fa:	30 e0       	ldi	r19, 0x00	; 0
 5fc:	b9 01       	movw	r22, r18
 5fe:	02 c0       	rjmp	.+4      	; 0x604 <DIO_Writepin+0x108>
 600:	66 0f       	add	r22, r22
 602:	77 1f       	adc	r23, r23
 604:	8a 95       	dec	r24
 606:	e2 f7       	brpl	.-8      	; 0x600 <DIO_Writepin+0x104>
 608:	cb 01       	movw	r24, r22
 60a:	80 95       	com	r24
 60c:	84 23       	and	r24, r20
 60e:	8b bb       	out	0x1b, r24	; 27
			 break;
 610:	08 95       	ret
			 case PB:
			 CLEAR_BIT(PORTB,pin_num);
 612:	48 b3       	in	r20, 0x18	; 24
 614:	21 e0       	ldi	r18, 0x01	; 1
 616:	30 e0       	ldi	r19, 0x00	; 0
 618:	b9 01       	movw	r22, r18
 61a:	02 c0       	rjmp	.+4      	; 0x620 <DIO_Writepin+0x124>
 61c:	66 0f       	add	r22, r22
 61e:	77 1f       	adc	r23, r23
 620:	8a 95       	dec	r24
 622:	e2 f7       	brpl	.-8      	; 0x61c <DIO_Writepin+0x120>
 624:	cb 01       	movw	r24, r22
 626:	80 95       	com	r24
 628:	84 23       	and	r24, r20
 62a:	88 bb       	out	0x18, r24	; 24
			 break;
 62c:	08 95       	ret
			 case PC:
			 CLEAR_BIT(PORTC,pin_num);
 62e:	45 b3       	in	r20, 0x15	; 21
 630:	21 e0       	ldi	r18, 0x01	; 1
 632:	30 e0       	ldi	r19, 0x00	; 0
 634:	b9 01       	movw	r22, r18
 636:	02 c0       	rjmp	.+4      	; 0x63c <DIO_Writepin+0x140>
 638:	66 0f       	add	r22, r22
 63a:	77 1f       	adc	r23, r23
 63c:	8a 95       	dec	r24
 63e:	e2 f7       	brpl	.-8      	; 0x638 <DIO_Writepin+0x13c>
 640:	cb 01       	movw	r24, r22
 642:	80 95       	com	r24
 644:	84 23       	and	r24, r20
 646:	85 bb       	out	0x15, r24	; 21
			 break;
 648:	08 95       	ret
			 case PD:
			 CLEAR_BIT(PORTD,pin_num);
 64a:	42 b3       	in	r20, 0x12	; 18
 64c:	21 e0       	ldi	r18, 0x01	; 1
 64e:	30 e0       	ldi	r19, 0x00	; 0
 650:	b9 01       	movw	r22, r18
 652:	02 c0       	rjmp	.+4      	; 0x658 <DIO_Writepin+0x15c>
 654:	66 0f       	add	r22, r22
 656:	77 1f       	adc	r23, r23
 658:	8a 95       	dec	r24
 65a:	e2 f7       	brpl	.-8      	; 0x654 <DIO_Writepin+0x158>
 65c:	cb 01       	movw	r24, r22
 65e:	80 95       	com	r24
 660:	84 23       	and	r24, r20
 662:	82 bb       	out	0x12, r24	; 18
			 break;
 664:	08 95       	ret
			 case PE:
			 CLEAR_BIT(PORTE,pin_num);
 666:	43 b1       	in	r20, 0x03	; 3
 668:	21 e0       	ldi	r18, 0x01	; 1
 66a:	30 e0       	ldi	r19, 0x00	; 0
 66c:	b9 01       	movw	r22, r18
 66e:	02 c0       	rjmp	.+4      	; 0x674 <DIO_Writepin+0x178>
 670:	66 0f       	add	r22, r22
 672:	77 1f       	adc	r23, r23
 674:	8a 95       	dec	r24
 676:	e2 f7       	brpl	.-8      	; 0x670 <DIO_Writepin+0x174>
 678:	cb 01       	movw	r24, r22
 67a:	80 95       	com	r24
 67c:	84 23       	and	r24, r20
 67e:	83 b9       	out	0x03, r24	; 3
			 break;
 680:	08 95       	ret
			 case PF:
			 CLEAR_BIT(PORTF,pin_num);
 682:	e2 e6       	ldi	r30, 0x62	; 98
 684:	f0 e0       	ldi	r31, 0x00	; 0
 686:	40 81       	ld	r20, Z
 688:	21 e0       	ldi	r18, 0x01	; 1
 68a:	30 e0       	ldi	r19, 0x00	; 0
 68c:	b9 01       	movw	r22, r18
 68e:	02 c0       	rjmp	.+4      	; 0x694 <DIO_Writepin+0x198>
 690:	66 0f       	add	r22, r22
 692:	77 1f       	adc	r23, r23
 694:	8a 95       	dec	r24
 696:	e2 f7       	brpl	.-8      	; 0x690 <DIO_Writepin+0x194>
 698:	cb 01       	movw	r24, r22
 69a:	80 95       	com	r24
 69c:	84 23       	and	r24, r20
 69e:	80 83       	st	Z, r24
			 break;
 6a0:	08 95       	ret
			 case PG:
			 CLEAR_BIT(PORTG,pin_num);
 6a2:	e5 e6       	ldi	r30, 0x65	; 101
 6a4:	f0 e0       	ldi	r31, 0x00	; 0
 6a6:	40 81       	ld	r20, Z
 6a8:	21 e0       	ldi	r18, 0x01	; 1
 6aa:	30 e0       	ldi	r19, 0x00	; 0
 6ac:	b9 01       	movw	r22, r18
 6ae:	02 c0       	rjmp	.+4      	; 0x6b4 <DIO_Writepin+0x1b8>
 6b0:	66 0f       	add	r22, r22
 6b2:	77 1f       	adc	r23, r23
 6b4:	8a 95       	dec	r24
 6b6:	e2 f7       	brpl	.-8      	; 0x6b0 <DIO_Writepin+0x1b4>
 6b8:	cb 01       	movw	r24, r22
 6ba:	80 95       	com	r24
 6bc:	84 23       	and	r24, r20
 6be:	80 83       	st	Z, r24
 6c0:	08 95       	ret

000006c2 <LCD_write_command>:
	n=n*10;
	i--;
	}
	return (((num%n)/(n/10))+48);
		  	 	 
 }
 6c2:	cf 93       	push	r28
 6c4:	c8 2f       	mov	r28, r24
 6c6:	60 e0       	ldi	r22, 0x00	; 0
 6c8:	85 e0       	ldi	r24, 0x05	; 5
 6ca:	18 df       	rcall	.-464    	; 0x4fc <DIO_Writepin>
 6cc:	c4 fb       	bst	r28, 4
 6ce:	66 27       	eor	r22, r22
 6d0:	60 f9       	bld	r22, 0
 6d2:	80 e0       	ldi	r24, 0x00	; 0
 6d4:	13 df       	rcall	.-474    	; 0x4fc <DIO_Writepin>
 6d6:	c5 fb       	bst	r28, 5
 6d8:	66 27       	eor	r22, r22
 6da:	60 f9       	bld	r22, 0
 6dc:	81 e0       	ldi	r24, 0x01	; 1
 6de:	0e df       	rcall	.-484    	; 0x4fc <DIO_Writepin>
 6e0:	c6 fb       	bst	r28, 6
 6e2:	66 27       	eor	r22, r22
 6e4:	60 f9       	bld	r22, 0
 6e6:	82 e0       	ldi	r24, 0x02	; 2
 6e8:	09 df       	rcall	.-494    	; 0x4fc <DIO_Writepin>
 6ea:	6c 2f       	mov	r22, r28
 6ec:	66 1f       	adc	r22, r22
 6ee:	66 27       	eor	r22, r22
 6f0:	66 1f       	adc	r22, r22
 6f2:	83 e0       	ldi	r24, 0x03	; 3
 6f4:	03 df       	rcall	.-506    	; 0x4fc <DIO_Writepin>
 6f6:	61 e0       	ldi	r22, 0x01	; 1
 6f8:	87 e0       	ldi	r24, 0x07	; 7
 6fa:	00 df       	rcall	.-512    	; 0x4fc <DIO_Writepin>
 6fc:	8f ec       	ldi	r24, 0xCF	; 207
 6fe:	97 e0       	ldi	r25, 0x07	; 7
 700:	01 97       	sbiw	r24, 0x01	; 1
 702:	f1 f7       	brne	.-4      	; 0x700 <LCD_write_command+0x3e>
 704:	00 c0       	rjmp	.+0      	; 0x706 <LCD_write_command+0x44>
 706:	00 00       	nop
 708:	60 e0       	ldi	r22, 0x00	; 0
 70a:	87 e0       	ldi	r24, 0x07	; 7
 70c:	f7 de       	rcall	.-530    	; 0x4fc <DIO_Writepin>
 70e:	8f ec       	ldi	r24, 0xCF	; 207
 710:	97 e0       	ldi	r25, 0x07	; 7
 712:	01 97       	sbiw	r24, 0x01	; 1
 714:	f1 f7       	brne	.-4      	; 0x712 <LCD_write_command+0x50>
 716:	00 c0       	rjmp	.+0      	; 0x718 <LCD_write_command+0x56>
 718:	00 00       	nop
 71a:	6c 2f       	mov	r22, r28
 71c:	61 70       	andi	r22, 0x01	; 1
 71e:	80 e0       	ldi	r24, 0x00	; 0
 720:	ed de       	rcall	.-550    	; 0x4fc <DIO_Writepin>
 722:	c1 fb       	bst	r28, 1
 724:	66 27       	eor	r22, r22
 726:	60 f9       	bld	r22, 0
 728:	81 e0       	ldi	r24, 0x01	; 1
 72a:	e8 de       	rcall	.-560    	; 0x4fc <DIO_Writepin>
 72c:	c2 fb       	bst	r28, 2
 72e:	66 27       	eor	r22, r22
 730:	60 f9       	bld	r22, 0
 732:	82 e0       	ldi	r24, 0x02	; 2
 734:	e3 de       	rcall	.-570    	; 0x4fc <DIO_Writepin>
 736:	c3 fb       	bst	r28, 3
 738:	66 27       	eor	r22, r22
 73a:	60 f9       	bld	r22, 0
 73c:	83 e0       	ldi	r24, 0x03	; 3
 73e:	de de       	rcall	.-580    	; 0x4fc <DIO_Writepin>
 740:	61 e0       	ldi	r22, 0x01	; 1
 742:	87 e0       	ldi	r24, 0x07	; 7
 744:	db de       	rcall	.-586    	; 0x4fc <DIO_Writepin>
 746:	8f ec       	ldi	r24, 0xCF	; 207
 748:	97 e0       	ldi	r25, 0x07	; 7
 74a:	01 97       	sbiw	r24, 0x01	; 1
 74c:	f1 f7       	brne	.-4      	; 0x74a <LCD_write_command+0x88>
 74e:	00 c0       	rjmp	.+0      	; 0x750 <LCD_write_command+0x8e>
 750:	00 00       	nop
 752:	60 e0       	ldi	r22, 0x00	; 0
 754:	87 e0       	ldi	r24, 0x07	; 7
 756:	d2 de       	rcall	.-604    	; 0x4fc <DIO_Writepin>
 758:	8f ec       	ldi	r24, 0xCF	; 207
 75a:	97 e0       	ldi	r25, 0x07	; 7
 75c:	01 97       	sbiw	r24, 0x01	; 1
 75e:	f1 f7       	brne	.-4      	; 0x75c <LCD_write_command+0x9a>
 760:	00 c0       	rjmp	.+0      	; 0x762 <LCD_write_command+0xa0>
 762:	00 00       	nop
 764:	cf 91       	pop	r28
 766:	08 95       	ret

00000768 <LCD_write_data>:
 768:	cf 93       	push	r28
 76a:	c8 2f       	mov	r28, r24
 76c:	61 e0       	ldi	r22, 0x01	; 1
 76e:	85 e0       	ldi	r24, 0x05	; 5
 770:	c5 de       	rcall	.-630    	; 0x4fc <DIO_Writepin>
 772:	c4 fb       	bst	r28, 4
 774:	66 27       	eor	r22, r22
 776:	60 f9       	bld	r22, 0
 778:	80 e0       	ldi	r24, 0x00	; 0
 77a:	c0 de       	rcall	.-640    	; 0x4fc <DIO_Writepin>
 77c:	c5 fb       	bst	r28, 5
 77e:	66 27       	eor	r22, r22
 780:	60 f9       	bld	r22, 0
 782:	81 e0       	ldi	r24, 0x01	; 1
 784:	bb de       	rcall	.-650    	; 0x4fc <DIO_Writepin>
 786:	c6 fb       	bst	r28, 6
 788:	66 27       	eor	r22, r22
 78a:	60 f9       	bld	r22, 0
 78c:	82 e0       	ldi	r24, 0x02	; 2
 78e:	b6 de       	rcall	.-660    	; 0x4fc <DIO_Writepin>
 790:	6c 2f       	mov	r22, r28
 792:	66 1f       	adc	r22, r22
 794:	66 27       	eor	r22, r22
 796:	66 1f       	adc	r22, r22
 798:	83 e0       	ldi	r24, 0x03	; 3
 79a:	b0 de       	rcall	.-672    	; 0x4fc <DIO_Writepin>
 79c:	61 e0       	ldi	r22, 0x01	; 1
 79e:	87 e0       	ldi	r24, 0x07	; 7
 7a0:	ad de       	rcall	.-678    	; 0x4fc <DIO_Writepin>
 7a2:	8f ec       	ldi	r24, 0xCF	; 207
 7a4:	97 e0       	ldi	r25, 0x07	; 7
 7a6:	01 97       	sbiw	r24, 0x01	; 1
 7a8:	f1 f7       	brne	.-4      	; 0x7a6 <LCD_write_data+0x3e>
 7aa:	00 c0       	rjmp	.+0      	; 0x7ac <LCD_write_data+0x44>
 7ac:	00 00       	nop
 7ae:	60 e0       	ldi	r22, 0x00	; 0
 7b0:	87 e0       	ldi	r24, 0x07	; 7
 7b2:	a4 de       	rcall	.-696    	; 0x4fc <DIO_Writepin>
 7b4:	8f ec       	ldi	r24, 0xCF	; 207
 7b6:	97 e0       	ldi	r25, 0x07	; 7
 7b8:	01 97       	sbiw	r24, 0x01	; 1
 7ba:	f1 f7       	brne	.-4      	; 0x7b8 <LCD_write_data+0x50>
 7bc:	00 c0       	rjmp	.+0      	; 0x7be <LCD_write_data+0x56>
 7be:	00 00       	nop
 7c0:	6c 2f       	mov	r22, r28
 7c2:	61 70       	andi	r22, 0x01	; 1
 7c4:	80 e0       	ldi	r24, 0x00	; 0
 7c6:	9a de       	rcall	.-716    	; 0x4fc <DIO_Writepin>
 7c8:	c1 fb       	bst	r28, 1
 7ca:	66 27       	eor	r22, r22
 7cc:	60 f9       	bld	r22, 0
 7ce:	81 e0       	ldi	r24, 0x01	; 1
 7d0:	95 de       	rcall	.-726    	; 0x4fc <DIO_Writepin>
 7d2:	c2 fb       	bst	r28, 2
 7d4:	66 27       	eor	r22, r22
 7d6:	60 f9       	bld	r22, 0
 7d8:	82 e0       	ldi	r24, 0x02	; 2
 7da:	90 de       	rcall	.-736    	; 0x4fc <DIO_Writepin>
 7dc:	c3 fb       	bst	r28, 3
 7de:	66 27       	eor	r22, r22
 7e0:	60 f9       	bld	r22, 0
 7e2:	83 e0       	ldi	r24, 0x03	; 3
 7e4:	8b de       	rcall	.-746    	; 0x4fc <DIO_Writepin>
 7e6:	61 e0       	ldi	r22, 0x01	; 1
 7e8:	87 e0       	ldi	r24, 0x07	; 7
 7ea:	88 de       	rcall	.-752    	; 0x4fc <DIO_Writepin>
 7ec:	8f ec       	ldi	r24, 0xCF	; 207
 7ee:	97 e0       	ldi	r25, 0x07	; 7
 7f0:	01 97       	sbiw	r24, 0x01	; 1
 7f2:	f1 f7       	brne	.-4      	; 0x7f0 <LCD_write_data+0x88>
 7f4:	00 c0       	rjmp	.+0      	; 0x7f6 <LCD_write_data+0x8e>
 7f6:	00 00       	nop
 7f8:	60 e0       	ldi	r22, 0x00	; 0
 7fa:	87 e0       	ldi	r24, 0x07	; 7
 7fc:	7f de       	rcall	.-770    	; 0x4fc <DIO_Writepin>
 7fe:	8f ec       	ldi	r24, 0xCF	; 207
 800:	97 e0       	ldi	r25, 0x07	; 7
 802:	01 97       	sbiw	r24, 0x01	; 1
 804:	f1 f7       	brne	.-4      	; 0x802 <LCD_write_data+0x9a>
 806:	00 c0       	rjmp	.+0      	; 0x808 <LCD_write_data+0xa0>
 808:	00 00       	nop
 80a:	cf 91       	pop	r28
 80c:	08 95       	ret

0000080e <LCD_Init>:
 80e:	2f e7       	ldi	r18, 0x7F	; 127
 810:	88 e3       	ldi	r24, 0x38	; 56
 812:	91 e0       	ldi	r25, 0x01	; 1
 814:	21 50       	subi	r18, 0x01	; 1
 816:	80 40       	sbci	r24, 0x00	; 0
 818:	90 40       	sbci	r25, 0x00	; 0
 81a:	e1 f7       	brne	.-8      	; 0x814 <LCD_Init+0x6>
 81c:	00 c0       	rjmp	.+0      	; 0x81e <LCD_Init+0x10>
 81e:	00 00       	nop
 820:	82 e0       	ldi	r24, 0x02	; 2
 822:	4f df       	rcall	.-354    	; 0x6c2 <LCD_write_command>
 824:	8f ec       	ldi	r24, 0xCF	; 207
 826:	97 e0       	ldi	r25, 0x07	; 7
 828:	01 97       	sbiw	r24, 0x01	; 1
 82a:	f1 f7       	brne	.-4      	; 0x828 <LCD_Init+0x1a>
 82c:	00 c0       	rjmp	.+0      	; 0x82e <LCD_Init+0x20>
 82e:	00 00       	nop
 830:	88 e2       	ldi	r24, 0x28	; 40
 832:	47 df       	rcall	.-370    	; 0x6c2 <LCD_write_command>
 834:	8f ec       	ldi	r24, 0xCF	; 207
 836:	97 e0       	ldi	r25, 0x07	; 7
 838:	01 97       	sbiw	r24, 0x01	; 1
 83a:	f1 f7       	brne	.-4      	; 0x838 <LCD_Init+0x2a>
 83c:	00 c0       	rjmp	.+0      	; 0x83e <LCD_Init+0x30>
 83e:	00 00       	nop
 840:	8c e0       	ldi	r24, 0x0C	; 12
 842:	3f df       	rcall	.-386    	; 0x6c2 <LCD_write_command>
 844:	8f ec       	ldi	r24, 0xCF	; 207
 846:	97 e0       	ldi	r25, 0x07	; 7
 848:	01 97       	sbiw	r24, 0x01	; 1
 84a:	f1 f7       	brne	.-4      	; 0x848 <LCD_Init+0x3a>
 84c:	00 c0       	rjmp	.+0      	; 0x84e <LCD_Init+0x40>
 84e:	00 00       	nop
 850:	81 e0       	ldi	r24, 0x01	; 1
 852:	37 df       	rcall	.-402    	; 0x6c2 <LCD_write_command>
 854:	8f e9       	ldi	r24, 0x9F	; 159
 856:	9f e0       	ldi	r25, 0x0F	; 15
 858:	01 97       	sbiw	r24, 0x01	; 1
 85a:	f1 f7       	brne	.-4      	; 0x858 <LCD_Init+0x4a>
 85c:	00 c0       	rjmp	.+0      	; 0x85e <LCD_Init+0x50>
 85e:	00 00       	nop
 860:	86 e0       	ldi	r24, 0x06	; 6
 862:	2f df       	rcall	.-418    	; 0x6c2 <LCD_write_command>
 864:	8f ec       	ldi	r24, 0xCF	; 207
 866:	97 e0       	ldi	r25, 0x07	; 7
 868:	01 97       	sbiw	r24, 0x01	; 1
 86a:	f1 f7       	brne	.-4      	; 0x868 <LCD_Init+0x5a>
 86c:	00 c0       	rjmp	.+0      	; 0x86e <LCD_Init+0x60>
 86e:	00 00       	nop
 870:	08 95       	ret

00000872 <LCD_GoTo>:
 872:	81 11       	cpse	r24, r1
 874:	03 c0       	rjmp	.+6      	; 0x87c <LCD_GoTo+0xa>
 876:	80 e8       	ldi	r24, 0x80	; 128
 878:	86 0f       	add	r24, r22
 87a:	06 c0       	rjmp	.+12     	; 0x888 <LCD_GoTo+0x16>
 87c:	81 30       	cpi	r24, 0x01	; 1
 87e:	19 f4       	brne	.+6      	; 0x886 <LCD_GoTo+0x14>
 880:	80 ec       	ldi	r24, 0xC0	; 192
 882:	86 0f       	add	r24, r22
 884:	01 c0       	rjmp	.+2      	; 0x888 <LCD_GoTo+0x16>
 886:	80 e8       	ldi	r24, 0x80	; 128
 888:	1c cf       	rjmp	.-456    	; 0x6c2 <LCD_write_command>
 88a:	08 95       	ret

0000088c <LCD_Writechar>:
 88c:	6d cf       	rjmp	.-294    	; 0x768 <LCD_write_data>
 88e:	08 95       	ret

00000890 <LCD_WriteNumber>:
		flag--;
	}
	
}*/
void LCD_WriteNumber(S32 num)//-2503
{
 890:	4f 92       	push	r4
 892:	5f 92       	push	r5
 894:	6f 92       	push	r6
 896:	7f 92       	push	r7
 898:	af 92       	push	r10
 89a:	bf 92       	push	r11
 89c:	cf 92       	push	r12
 89e:	df 92       	push	r13
 8a0:	ef 92       	push	r14
 8a2:	ff 92       	push	r15
 8a4:	1f 93       	push	r17
 8a6:	cf 93       	push	r28
 8a8:	df 93       	push	r29
 8aa:	cd b7       	in	r28, 0x3d	; 61
 8ac:	de b7       	in	r29, 0x3e	; 62
 8ae:	64 97       	sbiw	r28, 0x14	; 20
 8b0:	0f b6       	in	r0, 0x3f	; 63
 8b2:	f8 94       	cli
 8b4:	de bf       	out	0x3e, r29	; 62
 8b6:	0f be       	out	0x3f, r0	; 63
 8b8:	cd bf       	out	0x3d, r28	; 61
 8ba:	6b 01       	movw	r12, r22
 8bc:	7c 01       	movw	r14, r24
	u8 str[20];
	u8 rem,i=0;
	if (num==0)
 8be:	61 15       	cp	r22, r1
 8c0:	71 05       	cpc	r23, r1
 8c2:	81 05       	cpc	r24, r1
 8c4:	91 05       	cpc	r25, r1
 8c6:	19 f4       	brne	.+6      	; 0x8ce <LCD_WriteNumber+0x3e>
	command+=(0x40+x);
	LCD_write_command(command);  //LCD_write_command(0x80+0x40+x);
}
void LCD_Writechar(u8 ch)
{
	 LCD_write_data (ch);
 8c8:	80 e3       	ldi	r24, 0x30	; 48
 8ca:	4e df       	rcall	.-356    	; 0x768 <LCD_write_data>
 8cc:	45 c0       	rjmp	.+138    	; 0x958 <LCD_WriteNumber+0xc8>
	if (num==0)
	{
		LCD_Writechar('0');
		return;
	}
	if (num<0)
 8ce:	99 23       	and	r25, r25
 8d0:	54 f4       	brge	.+20     	; 0x8e6 <LCD_WriteNumber+0x56>
	{
		num=num*-1;
 8d2:	f0 94       	com	r15
 8d4:	e0 94       	com	r14
 8d6:	d0 94       	com	r13
 8d8:	c0 94       	com	r12
 8da:	c1 1c       	adc	r12, r1
 8dc:	d1 1c       	adc	r13, r1
 8de:	e1 1c       	adc	r14, r1
 8e0:	f1 1c       	adc	r15, r1
	command+=(0x40+x);
	LCD_write_command(command);  //LCD_write_command(0x80+0x40+x);
}
void LCD_Writechar(u8 ch)
{
	 LCD_write_data (ch);
 8e2:	8d e2       	ldi	r24, 0x2D	; 45
 8e4:	41 df       	rcall	.-382    	; 0x768 <LCD_write_data>
	if (num<0)
	{
		num=num*-1;
		LCD_Writechar('-');
	}
	while(num>0)
 8e6:	1c 14       	cp	r1, r12
 8e8:	1d 04       	cpc	r1, r13
 8ea:	1e 04       	cpc	r1, r14
 8ec:	1f 04       	cpc	r1, r15
 8ee:	a4 f5       	brge	.+104    	; 0x958 <LCD_WriteNumber+0xc8>
 8f0:	10 e0       	ldi	r17, 0x00	; 0
	{
		rem=num%10;
		str[i]=rem+'0';
 8f2:	0f 2e       	mov	r0, r31
 8f4:	fa e0       	ldi	r31, 0x0A	; 10
 8f6:	4f 2e       	mov	r4, r31
 8f8:	51 2c       	mov	r5, r1
 8fa:	61 2c       	mov	r6, r1
 8fc:	71 2c       	mov	r7, r1
 8fe:	f0 2d       	mov	r31, r0
 900:	01 c0       	rjmp	.+2      	; 0x904 <LCD_WriteNumber+0x74>
		num=num/10;
		i++;
 902:	18 2f       	mov	r17, r24
		LCD_Writechar('-');
	}
	while(num>0)
	{
		rem=num%10;
		str[i]=rem+'0';
 904:	aa 24       	eor	r10, r10
 906:	a3 94       	inc	r10
 908:	b1 2c       	mov	r11, r1
 90a:	ac 0e       	add	r10, r28
 90c:	bd 1e       	adc	r11, r29
 90e:	a1 0e       	add	r10, r17
 910:	b1 1c       	adc	r11, r1
 912:	c7 01       	movw	r24, r14
 914:	b6 01       	movw	r22, r12
 916:	a3 01       	movw	r20, r6
 918:	92 01       	movw	r18, r4
 91a:	1a d1       	rcall	.+564    	; 0xb50 <__divmodsi4>
 91c:	60 5d       	subi	r22, 0xD0	; 208
 91e:	f5 01       	movw	r30, r10
 920:	60 83       	st	Z, r22
		num=num/10;
 922:	c2 2e       	mov	r12, r18
 924:	d3 2e       	mov	r13, r19
 926:	e4 2e       	mov	r14, r20
 928:	f5 2e       	mov	r15, r21
		i++;
 92a:	81 e0       	ldi	r24, 0x01	; 1
 92c:	81 0f       	add	r24, r17
	if (num<0)
	{
		num=num*-1;
		LCD_Writechar('-');
	}
	while(num>0)
 92e:	1c 14       	cp	r1, r12
 930:	1d 04       	cpc	r1, r13
 932:	1e 04       	cpc	r1, r14
 934:	1f 04       	cpc	r1, r15
 936:	2c f3       	brlt	.-54     	; 0x902 <LCD_WriteNumber+0x72>
		rem=num%10;
		str[i]=rem+'0';
		num=num/10;
		i++;
	}
	for (S8 j=i-1;j>=0;j--)
 938:	f1 2e       	mov	r15, r17
 93a:	11 23       	and	r17, r17
 93c:	6c f0       	brlt	.+26     	; 0x958 <LCD_WriteNumber+0xc8>
	{
		LCD_Writechar(str[j]);
 93e:	e1 e0       	ldi	r30, 0x01	; 1
 940:	f0 e0       	ldi	r31, 0x00	; 0
 942:	ec 0f       	add	r30, r28
 944:	fd 1f       	adc	r31, r29
 946:	ef 0d       	add	r30, r15
 948:	f1 1d       	adc	r31, r1
 94a:	f7 fc       	sbrc	r15, 7
	command+=(0x40+x);
	LCD_write_command(command);  //LCD_write_command(0x80+0x40+x);
}
void LCD_Writechar(u8 ch)
{
	 LCD_write_data (ch);
 94c:	fa 95       	dec	r31
 94e:	80 81       	ld	r24, Z
 950:	0b df       	rcall	.-490    	; 0x768 <LCD_write_data>
 952:	fa 94       	dec	r15
		rem=num%10;
		str[i]=rem+'0';
		num=num/10;
		i++;
	}
	for (S8 j=i-1;j>=0;j--)
 954:	ff 20       	and	r15, r15
 956:	9c f7       	brge	.-26     	; 0x93e <LCD_WriteNumber+0xae>
	{
		LCD_Writechar(str[j]);
	}
	
	
}
 958:	64 96       	adiw	r28, 0x14	; 20
 95a:	0f b6       	in	r0, 0x3f	; 63
 95c:	f8 94       	cli
 95e:	de bf       	out	0x3e, r29	; 62
 960:	0f be       	out	0x3f, r0	; 63
 962:	cd bf       	out	0x3d, r28	; 61
 964:	df 91       	pop	r29
 966:	cf 91       	pop	r28
 968:	1f 91       	pop	r17
 96a:	ff 90       	pop	r15
 96c:	ef 90       	pop	r14
 96e:	df 90       	pop	r13
 970:	cf 90       	pop	r12
 972:	bf 90       	pop	r11
 974:	af 90       	pop	r10
 976:	7f 90       	pop	r7
 978:	6f 90       	pop	r6
 97a:	5f 90       	pop	r5
 97c:	4f 90       	pop	r4
 97e:	08 95       	ret

00000980 <Temp_Read>:
	return volt;
}

u16 Temp_Read(void)
{
	u16 adc =ADC_Read (LM35_CH);
 980:	80 e0       	ldi	r24, 0x00	; 0
 982:	08 dc       	rcall	.-2032   	; 0x194 <ADC_Read>
	u16 volt=((u32)5000*adc)/1024;
	u16 temp=volt;   //u16 temp=volt/10;---> in data sheet it said that each (1 degree = 10 mvolt),,IF we need to show 0.5 degree we not divide by 10
	return temp;
 984:	9c 01       	movw	r18, r24
 986:	a8 e8       	ldi	r26, 0x88	; 136
 988:	b3 e1       	ldi	r27, 0x13	; 19
 98a:	07 d1       	rcall	.+526    	; 0xb9a <__umulhisi3>
 98c:	dc 01       	movw	r26, r24
 98e:	cb 01       	movw	r24, r22
 990:	07 2e       	mov	r0, r23
 992:	7a e0       	ldi	r23, 0x0A	; 10
 994:	b6 95       	lsr	r27
 996:	a7 95       	ror	r26
 998:	97 95       	ror	r25
 99a:	87 95       	ror	r24
 99c:	7a 95       	dec	r23
 99e:	d1 f7       	brne	.-12     	; 0x994 <Temp_Read+0x14>
 9a0:	70 2d       	mov	r23, r0
	
}
 9a2:	08 95       	ret

000009a4 <__vector_18>:
	UART0_TX_Fptr = LocalFptr;
}


ISR(USART0_RX_vect)
{
 9a4:	1f 92       	push	r1
 9a6:	0f 92       	push	r0
 9a8:	0f b6       	in	r0, 0x3f	; 63
 9aa:	0f 92       	push	r0
 9ac:	11 24       	eor	r1, r1
 9ae:	0b b6       	in	r0, 0x3b	; 59
 9b0:	0f 92       	push	r0
 9b2:	2f 93       	push	r18
 9b4:	3f 93       	push	r19
 9b6:	4f 93       	push	r20
 9b8:	5f 93       	push	r21
 9ba:	6f 93       	push	r22
 9bc:	7f 93       	push	r23
 9be:	8f 93       	push	r24
 9c0:	9f 93       	push	r25
 9c2:	af 93       	push	r26
 9c4:	bf 93       	push	r27
 9c6:	ef 93       	push	r30
 9c8:	ff 93       	push	r31
	if (UART0_RX_Fptr!=NULLPTR)
 9ca:	e0 91 38 01 	lds	r30, 0x0138	; 0x800138 <UART0_RX_Fptr>
 9ce:	f0 91 39 01 	lds	r31, 0x0139	; 0x800139 <UART0_RX_Fptr+0x1>
 9d2:	30 97       	sbiw	r30, 0x00	; 0
 9d4:	09 f0       	breq	.+2      	; 0x9d8 <__vector_18+0x34>
	{
		UART0_RX_Fptr();
 9d6:	09 95       	icall
	}
}
 9d8:	ff 91       	pop	r31
 9da:	ef 91       	pop	r30
 9dc:	bf 91       	pop	r27
 9de:	af 91       	pop	r26
 9e0:	9f 91       	pop	r25
 9e2:	8f 91       	pop	r24
 9e4:	7f 91       	pop	r23
 9e6:	6f 91       	pop	r22
 9e8:	5f 91       	pop	r21
 9ea:	4f 91       	pop	r20
 9ec:	3f 91       	pop	r19
 9ee:	2f 91       	pop	r18
 9f0:	0f 90       	pop	r0
 9f2:	0b be       	out	0x3b, r0	; 59
 9f4:	0f 90       	pop	r0
 9f6:	0f be       	out	0x3f, r0	; 63
 9f8:	0f 90       	pop	r0
 9fa:	1f 90       	pop	r1
 9fc:	18 95       	reti

000009fe <__vector_20>:

ISR(USART0_TX_vect)
{
 9fe:	1f 92       	push	r1
 a00:	0f 92       	push	r0
 a02:	0f b6       	in	r0, 0x3f	; 63
 a04:	0f 92       	push	r0
 a06:	11 24       	eor	r1, r1
 a08:	0b b6       	in	r0, 0x3b	; 59
 a0a:	0f 92       	push	r0
 a0c:	2f 93       	push	r18
 a0e:	3f 93       	push	r19
 a10:	4f 93       	push	r20
 a12:	5f 93       	push	r21
 a14:	6f 93       	push	r22
 a16:	7f 93       	push	r23
 a18:	8f 93       	push	r24
 a1a:	9f 93       	push	r25
 a1c:	af 93       	push	r26
 a1e:	bf 93       	push	r27
 a20:	ef 93       	push	r30
 a22:	ff 93       	push	r31
	if (UART0_TX_Fptr!=NULLPTR)
 a24:	e0 91 36 01 	lds	r30, 0x0136	; 0x800136 <__data_end>
 a28:	f0 91 37 01 	lds	r31, 0x0137	; 0x800137 <__data_end+0x1>
 a2c:	30 97       	sbiw	r30, 0x00	; 0
 a2e:	09 f0       	breq	.+2      	; 0xa32 <__vector_20+0x34>
	{
		UART0_TX_Fptr();
 a30:	09 95       	icall
	}
}	
 a32:	ff 91       	pop	r31
 a34:	ef 91       	pop	r30
 a36:	bf 91       	pop	r27
 a38:	af 91       	pop	r26
 a3a:	9f 91       	pop	r25
 a3c:	8f 91       	pop	r24
 a3e:	7f 91       	pop	r23
 a40:	6f 91       	pop	r22
 a42:	5f 91       	pop	r21
 a44:	4f 91       	pop	r20
 a46:	3f 91       	pop	r19
 a48:	2f 91       	pop	r18
 a4a:	0f 90       	pop	r0
 a4c:	0b be       	out	0x3b, r0	; 59
 a4e:	0f 90       	pop	r0
 a50:	0f be       	out	0x3f, r0	; 63
 a52:	0f 90       	pop	r0
 a54:	1f 90       	pop	r1
 a56:	18 95       	reti

00000a58 <__vector_30>:
	UART1_TX_Fptr = LocalFptr;
}


ISR(USART1_RX_vect)
{
 a58:	1f 92       	push	r1
 a5a:	0f 92       	push	r0
 a5c:	0f b6       	in	r0, 0x3f	; 63
 a5e:	0f 92       	push	r0
 a60:	11 24       	eor	r1, r1
 a62:	0b b6       	in	r0, 0x3b	; 59
 a64:	0f 92       	push	r0
 a66:	2f 93       	push	r18
 a68:	3f 93       	push	r19
 a6a:	4f 93       	push	r20
 a6c:	5f 93       	push	r21
 a6e:	6f 93       	push	r22
 a70:	7f 93       	push	r23
 a72:	8f 93       	push	r24
 a74:	9f 93       	push	r25
 a76:	af 93       	push	r26
 a78:	bf 93       	push	r27
 a7a:	ef 93       	push	r30
 a7c:	ff 93       	push	r31
	if (UART1_RX_Fptr!=NULLPTR)
 a7e:	e0 91 3c 01 	lds	r30, 0x013C	; 0x80013c <UART1_RX_Fptr>
 a82:	f0 91 3d 01 	lds	r31, 0x013D	; 0x80013d <UART1_RX_Fptr+0x1>
 a86:	30 97       	sbiw	r30, 0x00	; 0
 a88:	09 f0       	breq	.+2      	; 0xa8c <__vector_30+0x34>
	{
		UART1_RX_Fptr();
 a8a:	09 95       	icall
	}
}
 a8c:	ff 91       	pop	r31
 a8e:	ef 91       	pop	r30
 a90:	bf 91       	pop	r27
 a92:	af 91       	pop	r26
 a94:	9f 91       	pop	r25
 a96:	8f 91       	pop	r24
 a98:	7f 91       	pop	r23
 a9a:	6f 91       	pop	r22
 a9c:	5f 91       	pop	r21
 a9e:	4f 91       	pop	r20
 aa0:	3f 91       	pop	r19
 aa2:	2f 91       	pop	r18
 aa4:	0f 90       	pop	r0
 aa6:	0b be       	out	0x3b, r0	; 59
 aa8:	0f 90       	pop	r0
 aaa:	0f be       	out	0x3f, r0	; 63
 aac:	0f 90       	pop	r0
 aae:	1f 90       	pop	r1
 ab0:	18 95       	reti

00000ab2 <__vector_32>:

ISR(USART1_TX_vect)
{
 ab2:	1f 92       	push	r1
 ab4:	0f 92       	push	r0
 ab6:	0f b6       	in	r0, 0x3f	; 63
 ab8:	0f 92       	push	r0
 aba:	11 24       	eor	r1, r1
 abc:	0b b6       	in	r0, 0x3b	; 59
 abe:	0f 92       	push	r0
 ac0:	2f 93       	push	r18
 ac2:	3f 93       	push	r19
 ac4:	4f 93       	push	r20
 ac6:	5f 93       	push	r21
 ac8:	6f 93       	push	r22
 aca:	7f 93       	push	r23
 acc:	8f 93       	push	r24
 ace:	9f 93       	push	r25
 ad0:	af 93       	push	r26
 ad2:	bf 93       	push	r27
 ad4:	ef 93       	push	r30
 ad6:	ff 93       	push	r31
	if (UART1_TX_Fptr!=NULLPTR)
 ad8:	e0 91 3a 01 	lds	r30, 0x013A	; 0x80013a <UART1_TX_Fptr>
 adc:	f0 91 3b 01 	lds	r31, 0x013B	; 0x80013b <UART1_TX_Fptr+0x1>
 ae0:	30 97       	sbiw	r30, 0x00	; 0
 ae2:	09 f0       	breq	.+2      	; 0xae6 <__vector_32+0x34>
	{
		UART1_TX_Fptr();
 ae4:	09 95       	icall
	}
}	
 ae6:	ff 91       	pop	r31
 ae8:	ef 91       	pop	r30
 aea:	bf 91       	pop	r27
 aec:	af 91       	pop	r26
 aee:	9f 91       	pop	r25
 af0:	8f 91       	pop	r24
 af2:	7f 91       	pop	r23
 af4:	6f 91       	pop	r22
 af6:	5f 91       	pop	r21
 af8:	4f 91       	pop	r20
 afa:	3f 91       	pop	r19
 afc:	2f 91       	pop	r18
 afe:	0f 90       	pop	r0
 b00:	0b be       	out	0x3b, r0	; 59
 b02:	0f 90       	pop	r0
 b04:	0f be       	out	0x3f, r0	; 63
 b06:	0f 90       	pop	r0
 b08:	1f 90       	pop	r1
 b0a:	18 95       	reti

00000b0c <__udivmodsi4>:
 b0c:	a1 e2       	ldi	r26, 0x21	; 33
 b0e:	1a 2e       	mov	r1, r26
 b10:	aa 1b       	sub	r26, r26
 b12:	bb 1b       	sub	r27, r27
 b14:	fd 01       	movw	r30, r26
 b16:	0d c0       	rjmp	.+26     	; 0xb32 <__udivmodsi4_ep>

00000b18 <__udivmodsi4_loop>:
 b18:	aa 1f       	adc	r26, r26
 b1a:	bb 1f       	adc	r27, r27
 b1c:	ee 1f       	adc	r30, r30
 b1e:	ff 1f       	adc	r31, r31
 b20:	a2 17       	cp	r26, r18
 b22:	b3 07       	cpc	r27, r19
 b24:	e4 07       	cpc	r30, r20
 b26:	f5 07       	cpc	r31, r21
 b28:	20 f0       	brcs	.+8      	; 0xb32 <__udivmodsi4_ep>
 b2a:	a2 1b       	sub	r26, r18
 b2c:	b3 0b       	sbc	r27, r19
 b2e:	e4 0b       	sbc	r30, r20
 b30:	f5 0b       	sbc	r31, r21

00000b32 <__udivmodsi4_ep>:
 b32:	66 1f       	adc	r22, r22
 b34:	77 1f       	adc	r23, r23
 b36:	88 1f       	adc	r24, r24
 b38:	99 1f       	adc	r25, r25
 b3a:	1a 94       	dec	r1
 b3c:	69 f7       	brne	.-38     	; 0xb18 <__udivmodsi4_loop>
 b3e:	60 95       	com	r22
 b40:	70 95       	com	r23
 b42:	80 95       	com	r24
 b44:	90 95       	com	r25
 b46:	9b 01       	movw	r18, r22
 b48:	ac 01       	movw	r20, r24
 b4a:	bd 01       	movw	r22, r26
 b4c:	cf 01       	movw	r24, r30
 b4e:	08 95       	ret

00000b50 <__divmodsi4>:
 b50:	05 2e       	mov	r0, r21
 b52:	97 fb       	bst	r25, 7
 b54:	16 f4       	brtc	.+4      	; 0xb5a <__divmodsi4+0xa>
 b56:	00 94       	com	r0
 b58:	0f d0       	rcall	.+30     	; 0xb78 <__negsi2>
 b5a:	57 fd       	sbrc	r21, 7
 b5c:	05 d0       	rcall	.+10     	; 0xb68 <__divmodsi4_neg2>
 b5e:	d6 df       	rcall	.-84     	; 0xb0c <__udivmodsi4>
 b60:	07 fc       	sbrc	r0, 7
 b62:	02 d0       	rcall	.+4      	; 0xb68 <__divmodsi4_neg2>
 b64:	46 f4       	brtc	.+16     	; 0xb76 <__divmodsi4_exit>
 b66:	08 c0       	rjmp	.+16     	; 0xb78 <__negsi2>

00000b68 <__divmodsi4_neg2>:
 b68:	50 95       	com	r21
 b6a:	40 95       	com	r20
 b6c:	30 95       	com	r19
 b6e:	21 95       	neg	r18
 b70:	3f 4f       	sbci	r19, 0xFF	; 255
 b72:	4f 4f       	sbci	r20, 0xFF	; 255
 b74:	5f 4f       	sbci	r21, 0xFF	; 255

00000b76 <__divmodsi4_exit>:
 b76:	08 95       	ret

00000b78 <__negsi2>:
 b78:	90 95       	com	r25
 b7a:	80 95       	com	r24
 b7c:	70 95       	com	r23
 b7e:	61 95       	neg	r22
 b80:	7f 4f       	sbci	r23, 0xFF	; 255
 b82:	8f 4f       	sbci	r24, 0xFF	; 255
 b84:	9f 4f       	sbci	r25, 0xFF	; 255
 b86:	08 95       	ret

00000b88 <__tablejump2__>:
 b88:	ee 0f       	add	r30, r30
 b8a:	ff 1f       	adc	r31, r31
 b8c:	00 24       	eor	r0, r0
 b8e:	00 1c       	adc	r0, r0
 b90:	0b be       	out	0x3b, r0	; 59
 b92:	07 90       	elpm	r0, Z+
 b94:	f6 91       	elpm	r31, Z
 b96:	e0 2d       	mov	r30, r0
 b98:	09 94       	ijmp

00000b9a <__umulhisi3>:
 b9a:	a2 9f       	mul	r26, r18
 b9c:	b0 01       	movw	r22, r0
 b9e:	b3 9f       	mul	r27, r19
 ba0:	c0 01       	movw	r24, r0
 ba2:	a3 9f       	mul	r26, r19
 ba4:	70 0d       	add	r23, r0
 ba6:	81 1d       	adc	r24, r1
 ba8:	11 24       	eor	r1, r1
 baa:	91 1d       	adc	r25, r1
 bac:	b2 9f       	mul	r27, r18
 bae:	70 0d       	add	r23, r0
 bb0:	81 1d       	adc	r24, r1
 bb2:	11 24       	eor	r1, r1
 bb4:	91 1d       	adc	r25, r1
 bb6:	08 95       	ret

00000bb8 <_exit>:
 bb8:	f8 94       	cli

00000bba <__stop_program>:
 bba:	ff cf       	rjmp	.-2      	; 0xbba <__stop_program>
