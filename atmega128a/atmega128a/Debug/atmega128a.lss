
atmega128a.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000036  00800100  000005f6  0000068a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005f6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  00800136  00800136  000006c0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006c0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000006f0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001d8  00000000  00000000  00000730  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000169a  00000000  00000000  00000908  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000caa  00000000  00000000  00001fa2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000bf9  00000000  00000000  00002c4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000424  00000000  00000000  00003848  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a2c  00000000  00000000  00003c6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000130c  00000000  00000000  00004698  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000170  00000000  00000000  000059a4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	5a c0       	rjmp	.+180    	; 0xb6 <__ctors_end>
   2:	00 00       	nop
   4:	75 c0       	rjmp	.+234    	; 0xf0 <__bad_interrupt>
   6:	00 00       	nop
   8:	73 c0       	rjmp	.+230    	; 0xf0 <__bad_interrupt>
   a:	00 00       	nop
   c:	71 c0       	rjmp	.+226    	; 0xf0 <__bad_interrupt>
   e:	00 00       	nop
  10:	6f c0       	rjmp	.+222    	; 0xf0 <__bad_interrupt>
  12:	00 00       	nop
  14:	6d c0       	rjmp	.+218    	; 0xf0 <__bad_interrupt>
  16:	00 00       	nop
  18:	6b c0       	rjmp	.+214    	; 0xf0 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	69 c0       	rjmp	.+210    	; 0xf0 <__bad_interrupt>
  1e:	00 00       	nop
  20:	67 c0       	rjmp	.+206    	; 0xf0 <__bad_interrupt>
  22:	00 00       	nop
  24:	65 c0       	rjmp	.+202    	; 0xf0 <__bad_interrupt>
  26:	00 00       	nop
  28:	63 c0       	rjmp	.+198    	; 0xf0 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	61 c0       	rjmp	.+194    	; 0xf0 <__bad_interrupt>
  2e:	00 00       	nop
  30:	5f c0       	rjmp	.+190    	; 0xf0 <__bad_interrupt>
  32:	00 00       	nop
  34:	5d c0       	rjmp	.+186    	; 0xf0 <__bad_interrupt>
  36:	00 00       	nop
  38:	5b c0       	rjmp	.+182    	; 0xf0 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	59 c0       	rjmp	.+178    	; 0xf0 <__bad_interrupt>
  3e:	00 00       	nop
  40:	57 c0       	rjmp	.+174    	; 0xf0 <__bad_interrupt>
  42:	00 00       	nop
  44:	55 c0       	rjmp	.+170    	; 0xf0 <__bad_interrupt>
  46:	00 00       	nop
  48:	17 c2       	rjmp	.+1070   	; 0x478 <__vector_18>
  4a:	00 00       	nop
  4c:	51 c0       	rjmp	.+162    	; 0xf0 <__bad_interrupt>
  4e:	00 00       	nop
  50:	40 c2       	rjmp	.+1152   	; 0x4d2 <__vector_20>
  52:	00 00       	nop
  54:	4d c0       	rjmp	.+154    	; 0xf0 <__bad_interrupt>
  56:	00 00       	nop
  58:	4b c0       	rjmp	.+150    	; 0xf0 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	49 c0       	rjmp	.+146    	; 0xf0 <__bad_interrupt>
  5e:	00 00       	nop
  60:	47 c0       	rjmp	.+142    	; 0xf0 <__bad_interrupt>
  62:	00 00       	nop
  64:	45 c0       	rjmp	.+138    	; 0xf0 <__bad_interrupt>
  66:	00 00       	nop
  68:	43 c0       	rjmp	.+134    	; 0xf0 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	41 c0       	rjmp	.+130    	; 0xf0 <__bad_interrupt>
  6e:	00 00       	nop
  70:	3f c0       	rjmp	.+126    	; 0xf0 <__bad_interrupt>
  72:	00 00       	nop
  74:	3d c0       	rjmp	.+122    	; 0xf0 <__bad_interrupt>
  76:	00 00       	nop
  78:	59 c2       	rjmp	.+1202   	; 0x52c <__vector_30>
  7a:	00 00       	nop
  7c:	39 c0       	rjmp	.+114    	; 0xf0 <__bad_interrupt>
  7e:	00 00       	nop
  80:	82 c2       	rjmp	.+1284   	; 0x586 <__vector_32>
  82:	00 00       	nop
  84:	35 c0       	rjmp	.+106    	; 0xf0 <__bad_interrupt>
  86:	00 00       	nop
  88:	33 c0       	rjmp	.+102    	; 0xf0 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	ab 00       	.word	0x00ab	; ????
  8e:	b8 00       	.word	0x00b8	; ????
  90:	c5 00       	.word	0x00c5	; ????
  92:	d2 00       	.word	0x00d2	; ????
  94:	df 00       	.word	0x00df	; ????
  96:	ec 00       	.word	0x00ec	; ????
  98:	fb 00       	.word	0x00fb	; ????
  9a:	14 01       	movw	r2, r8
  9c:	26 01       	movw	r4, r12
  9e:	38 01       	movw	r6, r16
  a0:	4a 01       	movw	r8, r20
  a2:	5c 01       	movw	r10, r24
  a4:	6e 01       	movw	r12, r28
  a6:	84 01       	movw	r16, r8
  a8:	a4 01       	movw	r20, r8
  aa:	b6 01       	movw	r22, r12
  ac:	c8 01       	movw	r24, r16
  ae:	da 01       	movw	r26, r20
  b0:	ec 01       	movw	r28, r24
  b2:	fe 01       	movw	r30, r28
  b4:	14 02       	muls	r17, r20

000000b6 <__ctors_end>:
  b6:	11 24       	eor	r1, r1
  b8:	1f be       	out	0x3f, r1	; 63
  ba:	cf ef       	ldi	r28, 0xFF	; 255
  bc:	d0 e1       	ldi	r29, 0x10	; 16
  be:	de bf       	out	0x3e, r29	; 62
  c0:	cd bf       	out	0x3d, r28	; 61

000000c2 <__do_copy_data>:
  c2:	11 e0       	ldi	r17, 0x01	; 1
  c4:	a0 e0       	ldi	r26, 0x00	; 0
  c6:	b1 e0       	ldi	r27, 0x01	; 1
  c8:	e6 ef       	ldi	r30, 0xF6	; 246
  ca:	f5 e0       	ldi	r31, 0x05	; 5
  cc:	00 e0       	ldi	r16, 0x00	; 0
  ce:	0b bf       	out	0x3b, r16	; 59
  d0:	02 c0       	rjmp	.+4      	; 0xd6 <__do_copy_data+0x14>
  d2:	07 90       	elpm	r0, Z+
  d4:	0d 92       	st	X+, r0
  d6:	a6 33       	cpi	r26, 0x36	; 54
  d8:	b1 07       	cpc	r27, r17
  da:	d9 f7       	brne	.-10     	; 0xd2 <__do_copy_data+0x10>

000000dc <__do_clear_bss>:
  dc:	21 e0       	ldi	r18, 0x01	; 1
  de:	a6 e3       	ldi	r26, 0x36	; 54
  e0:	b1 e0       	ldi	r27, 0x01	; 1
  e2:	01 c0       	rjmp	.+2      	; 0xe6 <.do_clear_bss_start>

000000e4 <.do_clear_bss_loop>:
  e4:	1d 92       	st	X+, r1

000000e6 <.do_clear_bss_start>:
  e6:	ae 33       	cpi	r26, 0x3E	; 62
  e8:	b2 07       	cpc	r27, r18
  ea:	e1 f7       	brne	.-8      	; 0xe4 <.do_clear_bss_loop>
  ec:	02 d0       	rcall	.+4      	; 0xf2 <main>
  ee:	81 c2       	rjmp	.+1282   	; 0x5f2 <_exit>

000000f0 <__bad_interrupt>:
  f0:	87 cf       	rjmp	.-242    	; 0x0 <__vectors>

000000f2 <main>:
#include "ADC.h"
#include "Sensors.h"

int main(void)
{
   DIO_Init();
  f2:	b0 d1       	rcall	.+864    	; 0x454 <DIO_Init>
   ADC_Init(REF_VCC,ADC_SCALER_64);
  f4:	66 e0       	ldi	r22, 0x06	; 6
  f6:	80 e0       	ldi	r24, 0x00	; 0
  f8:	01 d0       	rcall	.+2      	; 0xfc <ADC_Init>
  fa:	ff cf       	rjmp	.-2      	; 0xfa <main+0x8>

000000fc <ADC_Init>:
u8 static READ_Flag=0;

void ADC_Init(ADC_Ref_type vref,ADC_Scalar_type scaler)
{
    // select v ref
	switch(vref)
  fc:	81 30       	cpi	r24, 0x01	; 1
  fe:	39 f0       	breq	.+14     	; 0x10e <ADC_Init+0x12>
 100:	18 f0       	brcs	.+6      	; 0x108 <ADC_Init+0xc>
 102:	82 30       	cpi	r24, 0x02	; 2
 104:	39 f0       	breq	.+14     	; 0x114 <ADC_Init+0x18>
 106:	08 c0       	rjmp	.+16     	; 0x118 <ADC_Init+0x1c>
	{
		
	case REF_VCC:
	SET_BIT(ADMUX,REFS0);
 108:	3e 9a       	sbi	0x07, 6	; 7
	CLEAR_BIT(ADMUX,REFS1);
 10a:	3f 98       	cbi	0x07, 7	; 7
	break;
 10c:	05 c0       	rjmp	.+10     	; 0x118 <ADC_Init+0x1c>
	case REF_AREF:
	CLEAR_BIT(ADMUX,REFS0);
 10e:	3e 98       	cbi	0x07, 6	; 7
	CLEAR_BIT(ADMUX,REFS1);
 110:	3f 98       	cbi	0x07, 7	; 7
	break;
 112:	02 c0       	rjmp	.+4      	; 0x118 <ADC_Init+0x1c>
	case RE_256V :
	SET_BIT(ADMUX,REFS0);
 114:	3e 9a       	sbi	0x07, 6	; 7
	SET_BIT(ADMUX,REFS1);
 116:	3f 9a       	sbi	0x07, 7	; 7
	break;
	}
	
	//Scaler test
	ADCSRA=ADCSRA & 0XF8;
 118:	86 b1       	in	r24, 0x06	; 6
 11a:	88 7f       	andi	r24, 0xF8	; 248
 11c:	86 b9       	out	0x06, r24	; 6
	ADCSRA=ADCSRA |scaler;
 11e:	86 b1       	in	r24, 0x06	; 6
 120:	68 2b       	or	r22, r24
 122:	66 b9       	out	0x06, r22	; 6
	
	// enable 
	SET_BIT(ADCSRA,ADEN);  // we write it at the end of the function ,because if we write it at the start of the fun ADC will operate with the previous features 
 124:	37 9a       	sbi	0x06, 7	; 6
 126:	08 95       	ret

00000128 <DIO_Initpin>:
 }

 void DIO_Initpin(DIO_Pin_type pin,DIO_Pinstastus_type status)
 {
	 
	 DIO_Port_type PORT=pin/8;
 128:	e8 2f       	mov	r30, r24
 12a:	e6 95       	lsr	r30
 12c:	e6 95       	lsr	r30
 12e:	e6 95       	lsr	r30
	 u8 pin_num=pin%8;
 130:	87 70       	andi	r24, 0x07	; 7
	 switch(status)
 132:	61 30       	cpi	r22, 0x01	; 1
 134:	09 f4       	brne	.+2      	; 0x138 <DIO_Initpin+0x10>
 136:	6e c0       	rjmp	.+220    	; 0x214 <DIO_Initpin+0xec>
 138:	20 f0       	brcs	.+8      	; 0x142 <DIO_Initpin+0x1a>
 13a:	62 30       	cpi	r22, 0x02	; 2
 13c:	09 f4       	brne	.+2      	; 0x140 <DIO_Initpin+0x18>
 13e:	fa c0       	rjmp	.+500    	; 0x334 <DIO_Initpin+0x20c>
 140:	08 95       	ret
	 {
		 case OUTPUT:
		 switch(PORT)
 142:	4e 2f       	mov	r20, r30
 144:	50 e0       	ldi	r21, 0x00	; 0
 146:	47 30       	cpi	r20, 0x07	; 7
 148:	51 05       	cpc	r21, r1
 14a:	08 f0       	brcs	.+2      	; 0x14e <DIO_Initpin+0x26>
 14c:	82 c1       	rjmp	.+772    	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
 14e:	fa 01       	movw	r30, r20
 150:	ea 5b       	subi	r30, 0xBA	; 186
 152:	ff 4f       	sbci	r31, 0xFF	; 255
 154:	45 c2       	rjmp	.+1162   	; 0x5e0 <__tablejump2__>
		 {
			 case PA:
			 SET_BIT(DDRA,pin_num);
 156:	4a b3       	in	r20, 0x1a	; 26
 158:	21 e0       	ldi	r18, 0x01	; 1
 15a:	30 e0       	ldi	r19, 0x00	; 0
 15c:	b9 01       	movw	r22, r18
 15e:	02 c0       	rjmp	.+4      	; 0x164 <DIO_Initpin+0x3c>
 160:	66 0f       	add	r22, r22
 162:	77 1f       	adc	r23, r23
 164:	8a 95       	dec	r24
 166:	e2 f7       	brpl	.-8      	; 0x160 <DIO_Initpin+0x38>
 168:	cb 01       	movw	r24, r22
 16a:	84 2b       	or	r24, r20
 16c:	8a bb       	out	0x1a, r24	; 26
			 break;
 16e:	08 95       	ret
			 case PB:
			 SET_BIT(DDRB,pin_num);
 170:	47 b3       	in	r20, 0x17	; 23
 172:	21 e0       	ldi	r18, 0x01	; 1
 174:	30 e0       	ldi	r19, 0x00	; 0
 176:	b9 01       	movw	r22, r18
 178:	02 c0       	rjmp	.+4      	; 0x17e <DIO_Initpin+0x56>
 17a:	66 0f       	add	r22, r22
 17c:	77 1f       	adc	r23, r23
 17e:	8a 95       	dec	r24
 180:	e2 f7       	brpl	.-8      	; 0x17a <DIO_Initpin+0x52>
 182:	cb 01       	movw	r24, r22
 184:	84 2b       	or	r24, r20
 186:	87 bb       	out	0x17, r24	; 23
			 break;
 188:	08 95       	ret
			 case PC:
			 SET_BIT(DDRC,pin_num);
 18a:	44 b3       	in	r20, 0x14	; 20
 18c:	21 e0       	ldi	r18, 0x01	; 1
 18e:	30 e0       	ldi	r19, 0x00	; 0
 190:	b9 01       	movw	r22, r18
 192:	02 c0       	rjmp	.+4      	; 0x198 <DIO_Initpin+0x70>
 194:	66 0f       	add	r22, r22
 196:	77 1f       	adc	r23, r23
 198:	8a 95       	dec	r24
 19a:	e2 f7       	brpl	.-8      	; 0x194 <DIO_Initpin+0x6c>
 19c:	cb 01       	movw	r24, r22
 19e:	84 2b       	or	r24, r20
 1a0:	84 bb       	out	0x14, r24	; 20
			 break;
 1a2:	08 95       	ret
			 case PD:
			 SET_BIT(DDRD,pin_num);
 1a4:	41 b3       	in	r20, 0x11	; 17
 1a6:	21 e0       	ldi	r18, 0x01	; 1
 1a8:	30 e0       	ldi	r19, 0x00	; 0
 1aa:	b9 01       	movw	r22, r18
 1ac:	02 c0       	rjmp	.+4      	; 0x1b2 <DIO_Initpin+0x8a>
 1ae:	66 0f       	add	r22, r22
 1b0:	77 1f       	adc	r23, r23
 1b2:	8a 95       	dec	r24
 1b4:	e2 f7       	brpl	.-8      	; 0x1ae <DIO_Initpin+0x86>
 1b6:	cb 01       	movw	r24, r22
 1b8:	84 2b       	or	r24, r20
 1ba:	81 bb       	out	0x11, r24	; 17
			 break;
 1bc:	08 95       	ret
			 case PE:
			 SET_BIT(DDRE,pin_num);
 1be:	42 b1       	in	r20, 0x02	; 2
 1c0:	21 e0       	ldi	r18, 0x01	; 1
 1c2:	30 e0       	ldi	r19, 0x00	; 0
 1c4:	b9 01       	movw	r22, r18
 1c6:	02 c0       	rjmp	.+4      	; 0x1cc <DIO_Initpin+0xa4>
 1c8:	66 0f       	add	r22, r22
 1ca:	77 1f       	adc	r23, r23
 1cc:	8a 95       	dec	r24
 1ce:	e2 f7       	brpl	.-8      	; 0x1c8 <DIO_Initpin+0xa0>
 1d0:	cb 01       	movw	r24, r22
 1d2:	84 2b       	or	r24, r20
 1d4:	82 b9       	out	0x02, r24	; 2
			 break;
 1d6:	08 95       	ret
			 case PF:
			 SET_BIT(DDRF,pin_num);
 1d8:	e1 e6       	ldi	r30, 0x61	; 97
 1da:	f0 e0       	ldi	r31, 0x00	; 0
 1dc:	40 81       	ld	r20, Z
 1de:	21 e0       	ldi	r18, 0x01	; 1
 1e0:	30 e0       	ldi	r19, 0x00	; 0
 1e2:	b9 01       	movw	r22, r18
 1e4:	02 c0       	rjmp	.+4      	; 0x1ea <DIO_Initpin+0xc2>
 1e6:	66 0f       	add	r22, r22
 1e8:	77 1f       	adc	r23, r23
 1ea:	8a 95       	dec	r24
 1ec:	e2 f7       	brpl	.-8      	; 0x1e6 <DIO_Initpin+0xbe>
 1ee:	cb 01       	movw	r24, r22
 1f0:	84 2b       	or	r24, r20
 1f2:	80 83       	st	Z, r24
			 break;
 1f4:	08 95       	ret
			 case PG:
			 SET_BIT(DDRG,pin_num);
 1f6:	e4 e6       	ldi	r30, 0x64	; 100
 1f8:	f0 e0       	ldi	r31, 0x00	; 0
 1fa:	40 81       	ld	r20, Z
 1fc:	21 e0       	ldi	r18, 0x01	; 1
 1fe:	30 e0       	ldi	r19, 0x00	; 0
 200:	b9 01       	movw	r22, r18
 202:	02 c0       	rjmp	.+4      	; 0x208 <DIO_Initpin+0xe0>
 204:	66 0f       	add	r22, r22
 206:	77 1f       	adc	r23, r23
 208:	8a 95       	dec	r24
 20a:	e2 f7       	brpl	.-8      	; 0x204 <DIO_Initpin+0xdc>
 20c:	cb 01       	movw	r24, r22
 20e:	84 2b       	or	r24, r20
 210:	80 83       	st	Z, r24
			 break;
 212:	08 95       	ret
			 
		 }
		 break;
		 
		 case INFREE:
		 switch(PORT)
 214:	4e 2f       	mov	r20, r30
 216:	50 e0       	ldi	r21, 0x00	; 0
 218:	47 30       	cpi	r20, 0x07	; 7
 21a:	51 05       	cpc	r21, r1
 21c:	08 f0       	brcs	.+2      	; 0x220 <DIO_Initpin+0xf8>
 21e:	19 c1       	rjmp	.+562    	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
 220:	fa 01       	movw	r30, r20
 222:	e3 5b       	subi	r30, 0xB3	; 179
 224:	ff 4f       	sbci	r31, 0xFF	; 255
 226:	dc c1       	rjmp	.+952    	; 0x5e0 <__tablejump2__>
		 {
			 case PA:
			 CLEAR_BIT(DDRA,pin_num);
 228:	4a b3       	in	r20, 0x1a	; 26
 22a:	21 e0       	ldi	r18, 0x01	; 1
 22c:	30 e0       	ldi	r19, 0x00	; 0
 22e:	b9 01       	movw	r22, r18
 230:	02 c0       	rjmp	.+4      	; 0x236 <DIO_Initpin+0x10e>
 232:	66 0f       	add	r22, r22
 234:	77 1f       	adc	r23, r23
 236:	8a 95       	dec	r24
 238:	e2 f7       	brpl	.-8      	; 0x232 <DIO_Initpin+0x10a>
 23a:	cb 01       	movw	r24, r22
 23c:	80 95       	com	r24
 23e:	94 2f       	mov	r25, r20
 240:	98 23       	and	r25, r24
 242:	9a bb       	out	0x1a, r25	; 26
			 CLEAR_BIT(PORTA,pin_num);
 244:	9b b3       	in	r25, 0x1b	; 27
 246:	89 23       	and	r24, r25
 248:	8b bb       	out	0x1b, r24	; 27
			 break;
 24a:	08 95       	ret
			 
			 case PB:
			 CLEAR_BIT(DDRB,pin_num);
 24c:	47 b3       	in	r20, 0x17	; 23
 24e:	21 e0       	ldi	r18, 0x01	; 1
 250:	30 e0       	ldi	r19, 0x00	; 0
 252:	b9 01       	movw	r22, r18
 254:	02 c0       	rjmp	.+4      	; 0x25a <DIO_Initpin+0x132>
 256:	66 0f       	add	r22, r22
 258:	77 1f       	adc	r23, r23
 25a:	8a 95       	dec	r24
 25c:	e2 f7       	brpl	.-8      	; 0x256 <DIO_Initpin+0x12e>
 25e:	cb 01       	movw	r24, r22
 260:	80 95       	com	r24
 262:	94 2f       	mov	r25, r20
 264:	98 23       	and	r25, r24
 266:	97 bb       	out	0x17, r25	; 23
			 CLEAR_BIT(PORTB,pin_num);
 268:	98 b3       	in	r25, 0x18	; 24
 26a:	89 23       	and	r24, r25
 26c:	88 bb       	out	0x18, r24	; 24
			 break;
 26e:	08 95       	ret
			 
			 case PC:
			 CLEAR_BIT(DDRC,pin_num);
 270:	44 b3       	in	r20, 0x14	; 20
 272:	21 e0       	ldi	r18, 0x01	; 1
 274:	30 e0       	ldi	r19, 0x00	; 0
 276:	b9 01       	movw	r22, r18
 278:	02 c0       	rjmp	.+4      	; 0x27e <DIO_Initpin+0x156>
 27a:	66 0f       	add	r22, r22
 27c:	77 1f       	adc	r23, r23
 27e:	8a 95       	dec	r24
 280:	e2 f7       	brpl	.-8      	; 0x27a <DIO_Initpin+0x152>
 282:	cb 01       	movw	r24, r22
 284:	80 95       	com	r24
 286:	94 2f       	mov	r25, r20
 288:	98 23       	and	r25, r24
 28a:	94 bb       	out	0x14, r25	; 20
			 CLEAR_BIT(PORTC,pin_num);
 28c:	95 b3       	in	r25, 0x15	; 21
 28e:	89 23       	and	r24, r25
 290:	85 bb       	out	0x15, r24	; 21
			 break;
 292:	08 95       	ret
			 
			 case PD:
			 CLEAR_BIT(DDRD,pin_num);
 294:	41 b3       	in	r20, 0x11	; 17
 296:	21 e0       	ldi	r18, 0x01	; 1
 298:	30 e0       	ldi	r19, 0x00	; 0
 29a:	b9 01       	movw	r22, r18
 29c:	02 c0       	rjmp	.+4      	; 0x2a2 <DIO_Initpin+0x17a>
 29e:	66 0f       	add	r22, r22
 2a0:	77 1f       	adc	r23, r23
 2a2:	8a 95       	dec	r24
 2a4:	e2 f7       	brpl	.-8      	; 0x29e <DIO_Initpin+0x176>
 2a6:	cb 01       	movw	r24, r22
 2a8:	80 95       	com	r24
 2aa:	94 2f       	mov	r25, r20
 2ac:	98 23       	and	r25, r24
 2ae:	91 bb       	out	0x11, r25	; 17
			 CLEAR_BIT(PORTD,pin_num);
 2b0:	92 b3       	in	r25, 0x12	; 18
 2b2:	89 23       	and	r24, r25
 2b4:	82 bb       	out	0x12, r24	; 18
			 break;
 2b6:	08 95       	ret
			 
			 case PE:
			 CLEAR_BIT(DDRE,pin_num);
 2b8:	42 b1       	in	r20, 0x02	; 2
 2ba:	21 e0       	ldi	r18, 0x01	; 1
 2bc:	30 e0       	ldi	r19, 0x00	; 0
 2be:	b9 01       	movw	r22, r18
 2c0:	02 c0       	rjmp	.+4      	; 0x2c6 <DIO_Initpin+0x19e>
 2c2:	66 0f       	add	r22, r22
 2c4:	77 1f       	adc	r23, r23
 2c6:	8a 95       	dec	r24
 2c8:	e2 f7       	brpl	.-8      	; 0x2c2 <DIO_Initpin+0x19a>
 2ca:	cb 01       	movw	r24, r22
 2cc:	80 95       	com	r24
 2ce:	94 2f       	mov	r25, r20
 2d0:	98 23       	and	r25, r24
 2d2:	92 b9       	out	0x02, r25	; 2
		     CLEAR_BIT(PORTE,pin_num);
 2d4:	93 b1       	in	r25, 0x03	; 3
 2d6:	89 23       	and	r24, r25
 2d8:	83 b9       	out	0x03, r24	; 3
		     break;
 2da:	08 95       	ret
			 
			 case PF:
		     CLEAR_BIT(DDRF,pin_num);
 2dc:	e1 e6       	ldi	r30, 0x61	; 97
 2de:	f0 e0       	ldi	r31, 0x00	; 0
 2e0:	40 81       	ld	r20, Z
 2e2:	21 e0       	ldi	r18, 0x01	; 1
 2e4:	30 e0       	ldi	r19, 0x00	; 0
 2e6:	b9 01       	movw	r22, r18
 2e8:	02 c0       	rjmp	.+4      	; 0x2ee <DIO_Initpin+0x1c6>
 2ea:	66 0f       	add	r22, r22
 2ec:	77 1f       	adc	r23, r23
 2ee:	8a 95       	dec	r24
 2f0:	e2 f7       	brpl	.-8      	; 0x2ea <DIO_Initpin+0x1c2>
 2f2:	cb 01       	movw	r24, r22
 2f4:	80 95       	com	r24
 2f6:	94 2f       	mov	r25, r20
 2f8:	98 23       	and	r25, r24
 2fa:	90 83       	st	Z, r25
		     CLEAR_BIT(PORTF,pin_num);
 2fc:	e2 e6       	ldi	r30, 0x62	; 98
 2fe:	f0 e0       	ldi	r31, 0x00	; 0
 300:	90 81       	ld	r25, Z
 302:	89 23       	and	r24, r25
 304:	80 83       	st	Z, r24
		     break;
 306:	08 95       	ret
			 
			 case PG:
			 CLEAR_BIT(DDRG,pin_num);
 308:	e4 e6       	ldi	r30, 0x64	; 100
 30a:	f0 e0       	ldi	r31, 0x00	; 0
 30c:	40 81       	ld	r20, Z
 30e:	21 e0       	ldi	r18, 0x01	; 1
 310:	30 e0       	ldi	r19, 0x00	; 0
 312:	b9 01       	movw	r22, r18
 314:	02 c0       	rjmp	.+4      	; 0x31a <DIO_Initpin+0x1f2>
 316:	66 0f       	add	r22, r22
 318:	77 1f       	adc	r23, r23
 31a:	8a 95       	dec	r24
 31c:	e2 f7       	brpl	.-8      	; 0x316 <DIO_Initpin+0x1ee>
 31e:	cb 01       	movw	r24, r22
 320:	80 95       	com	r24
 322:	94 2f       	mov	r25, r20
 324:	98 23       	and	r25, r24
 326:	90 83       	st	Z, r25
			 CLEAR_BIT(PORTG,pin_num);
 328:	e5 e6       	ldi	r30, 0x65	; 101
 32a:	f0 e0       	ldi	r31, 0x00	; 0
 32c:	90 81       	ld	r25, Z
 32e:	89 23       	and	r24, r25
 330:	80 83       	st	Z, r24
			 break;
 332:	08 95       	ret
		 }
		 break;
		 
		 case INPULL:
		 switch(PORT)
 334:	4e 2f       	mov	r20, r30
 336:	50 e0       	ldi	r21, 0x00	; 0
 338:	47 30       	cpi	r20, 0x07	; 7
 33a:	51 05       	cpc	r21, r1
 33c:	08 f0       	brcs	.+2      	; 0x340 <DIO_Initpin+0x218>
 33e:	89 c0       	rjmp	.+274    	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
 340:	fa 01       	movw	r30, r20
 342:	ec 5a       	subi	r30, 0xAC	; 172
 344:	ff 4f       	sbci	r31, 0xFF	; 255
 346:	4c c1       	rjmp	.+664    	; 0x5e0 <__tablejump2__>
		 {
			 case PA:
			 CLEAR_BIT(DDRA,pin_num);
 348:	4a b3       	in	r20, 0x1a	; 26
 34a:	21 e0       	ldi	r18, 0x01	; 1
 34c:	30 e0       	ldi	r19, 0x00	; 0
 34e:	b9 01       	movw	r22, r18
 350:	02 c0       	rjmp	.+4      	; 0x356 <DIO_Initpin+0x22e>
 352:	66 0f       	add	r22, r22
 354:	77 1f       	adc	r23, r23
 356:	8a 95       	dec	r24
 358:	e2 f7       	brpl	.-8      	; 0x352 <DIO_Initpin+0x22a>
 35a:	cb 01       	movw	r24, r22
 35c:	96 2f       	mov	r25, r22
 35e:	90 95       	com	r25
 360:	94 23       	and	r25, r20
 362:	9a bb       	out	0x1a, r25	; 26
			 SET_BIT(PORTA,pin_num);
 364:	9b b3       	in	r25, 0x1b	; 27
 366:	89 2b       	or	r24, r25
 368:	8b bb       	out	0x1b, r24	; 27
			 break;
 36a:	08 95       	ret
			 
			 case PB:
			 CLEAR_BIT(DDRB,pin_num);
 36c:	47 b3       	in	r20, 0x17	; 23
 36e:	21 e0       	ldi	r18, 0x01	; 1
 370:	30 e0       	ldi	r19, 0x00	; 0
 372:	b9 01       	movw	r22, r18
 374:	02 c0       	rjmp	.+4      	; 0x37a <DIO_Initpin+0x252>
 376:	66 0f       	add	r22, r22
 378:	77 1f       	adc	r23, r23
 37a:	8a 95       	dec	r24
 37c:	e2 f7       	brpl	.-8      	; 0x376 <DIO_Initpin+0x24e>
 37e:	cb 01       	movw	r24, r22
 380:	96 2f       	mov	r25, r22
 382:	90 95       	com	r25
 384:	94 23       	and	r25, r20
 386:	97 bb       	out	0x17, r25	; 23
			 SET_BIT(PORTB,pin_num);
 388:	98 b3       	in	r25, 0x18	; 24
 38a:	89 2b       	or	r24, r25
 38c:	88 bb       	out	0x18, r24	; 24
			 break;
 38e:	08 95       	ret
			 
			 case PC:
			 CLEAR_BIT(DDRC,pin_num);
 390:	44 b3       	in	r20, 0x14	; 20
 392:	21 e0       	ldi	r18, 0x01	; 1
 394:	30 e0       	ldi	r19, 0x00	; 0
 396:	b9 01       	movw	r22, r18
 398:	02 c0       	rjmp	.+4      	; 0x39e <DIO_Initpin+0x276>
 39a:	66 0f       	add	r22, r22
 39c:	77 1f       	adc	r23, r23
 39e:	8a 95       	dec	r24
 3a0:	e2 f7       	brpl	.-8      	; 0x39a <DIO_Initpin+0x272>
 3a2:	cb 01       	movw	r24, r22
 3a4:	96 2f       	mov	r25, r22
 3a6:	90 95       	com	r25
 3a8:	94 23       	and	r25, r20
 3aa:	94 bb       	out	0x14, r25	; 20
			 SET_BIT(PORTC,pin_num);
 3ac:	95 b3       	in	r25, 0x15	; 21
 3ae:	89 2b       	or	r24, r25
 3b0:	85 bb       	out	0x15, r24	; 21
			 break;
 3b2:	08 95       	ret
			 
			 case PD:
			 CLEAR_BIT(DDRD,pin_num);
 3b4:	41 b3       	in	r20, 0x11	; 17
 3b6:	21 e0       	ldi	r18, 0x01	; 1
 3b8:	30 e0       	ldi	r19, 0x00	; 0
 3ba:	b9 01       	movw	r22, r18
 3bc:	02 c0       	rjmp	.+4      	; 0x3c2 <DIO_Initpin+0x29a>
 3be:	66 0f       	add	r22, r22
 3c0:	77 1f       	adc	r23, r23
 3c2:	8a 95       	dec	r24
 3c4:	e2 f7       	brpl	.-8      	; 0x3be <DIO_Initpin+0x296>
 3c6:	cb 01       	movw	r24, r22
 3c8:	96 2f       	mov	r25, r22
 3ca:	90 95       	com	r25
 3cc:	94 23       	and	r25, r20
 3ce:	91 bb       	out	0x11, r25	; 17
			 SET_BIT(PORTD,pin_num);
 3d0:	92 b3       	in	r25, 0x12	; 18
 3d2:	89 2b       	or	r24, r25
 3d4:	82 bb       	out	0x12, r24	; 18
			 break;
 3d6:	08 95       	ret
			 
			 case PE:
			 CLEAR_BIT(DDRE,pin_num);
 3d8:	42 b1       	in	r20, 0x02	; 2
 3da:	21 e0       	ldi	r18, 0x01	; 1
 3dc:	30 e0       	ldi	r19, 0x00	; 0
 3de:	b9 01       	movw	r22, r18
 3e0:	02 c0       	rjmp	.+4      	; 0x3e6 <DIO_Initpin+0x2be>
 3e2:	66 0f       	add	r22, r22
 3e4:	77 1f       	adc	r23, r23
 3e6:	8a 95       	dec	r24
 3e8:	e2 f7       	brpl	.-8      	; 0x3e2 <DIO_Initpin+0x2ba>
 3ea:	cb 01       	movw	r24, r22
 3ec:	96 2f       	mov	r25, r22
 3ee:	90 95       	com	r25
 3f0:	94 23       	and	r25, r20
 3f2:	92 b9       	out	0x02, r25	; 2
			 SET_BIT(PORTE,pin_num);
 3f4:	93 b1       	in	r25, 0x03	; 3
 3f6:	89 2b       	or	r24, r25
 3f8:	83 b9       	out	0x03, r24	; 3
			 break;
 3fa:	08 95       	ret
			 
			 case PF:
			 CLEAR_BIT(DDRF,pin_num);
 3fc:	e1 e6       	ldi	r30, 0x61	; 97
 3fe:	f0 e0       	ldi	r31, 0x00	; 0
 400:	40 81       	ld	r20, Z
 402:	21 e0       	ldi	r18, 0x01	; 1
 404:	30 e0       	ldi	r19, 0x00	; 0
 406:	b9 01       	movw	r22, r18
 408:	02 c0       	rjmp	.+4      	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
 40a:	66 0f       	add	r22, r22
 40c:	77 1f       	adc	r23, r23
 40e:	8a 95       	dec	r24
 410:	e2 f7       	brpl	.-8      	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 412:	cb 01       	movw	r24, r22
 414:	96 2f       	mov	r25, r22
 416:	90 95       	com	r25
 418:	94 23       	and	r25, r20
 41a:	90 83       	st	Z, r25
			 SET_BIT(PORTF,pin_num);
 41c:	e2 e6       	ldi	r30, 0x62	; 98
 41e:	f0 e0       	ldi	r31, 0x00	; 0
 420:	90 81       	ld	r25, Z
 422:	89 2b       	or	r24, r25
 424:	80 83       	st	Z, r24
			 break;
 426:	08 95       	ret
			 
			 case PG:
			 CLEAR_BIT(DDRG,pin_num);
 428:	e4 e6       	ldi	r30, 0x64	; 100
 42a:	f0 e0       	ldi	r31, 0x00	; 0
 42c:	40 81       	ld	r20, Z
 42e:	21 e0       	ldi	r18, 0x01	; 1
 430:	30 e0       	ldi	r19, 0x00	; 0
 432:	b9 01       	movw	r22, r18
 434:	02 c0       	rjmp	.+4      	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
 436:	66 0f       	add	r22, r22
 438:	77 1f       	adc	r23, r23
 43a:	8a 95       	dec	r24
 43c:	e2 f7       	brpl	.-8      	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 43e:	cb 01       	movw	r24, r22
 440:	96 2f       	mov	r25, r22
 442:	90 95       	com	r25
 444:	94 23       	and	r25, r20
 446:	90 83       	st	Z, r25
			 SET_BIT(PORTG,pin_num);
 448:	e5 e6       	ldi	r30, 0x65	; 101
 44a:	f0 e0       	ldi	r31, 0x00	; 0
 44c:	90 81       	ld	r25, Z
 44e:	89 2b       	or	r24, r25
 450:	80 83       	st	Z, r24
 452:	08 95       	ret

00000454 <DIO_Init>:

#define F_CPU 1000000UL
#include "util/delay.h"

 void DIO_Init(void)
 {
 454:	0f 93       	push	r16
 456:	1f 93       	push	r17
 458:	cf 93       	push	r28
 45a:	00 e0       	ldi	r16, 0x00	; 0
 45c:	11 e0       	ldi	r17, 0x01	; 1
	 DIO_Pin_type i;
	 for(i=PINA0;i<TOTAL_PINS;i++)
 45e:	c0 e0       	ldi	r28, 0x00	; 0
	 DIO_Initpin(i,PinStatus[i]);
 460:	f8 01       	movw	r30, r16
 462:	61 91       	ld	r22, Z+
 464:	8f 01       	movw	r16, r30
 466:	8c 2f       	mov	r24, r28
 468:	5f de       	rcall	.-834    	; 0x128 <DIO_Initpin>
#include "util/delay.h"

 void DIO_Init(void)
 {
	 DIO_Pin_type i;
	 for(i=PINA0;i<TOTAL_PINS;i++)
 46a:	cf 5f       	subi	r28, 0xFF	; 255
 46c:	c5 33       	cpi	r28, 0x35	; 53
 46e:	c1 f7       	brne	.-16     	; 0x460 <DIO_Init+0xc>
	 DIO_Initpin(i,PinStatus[i]);
 }
 470:	cf 91       	pop	r28
 472:	1f 91       	pop	r17
 474:	0f 91       	pop	r16
 476:	08 95       	ret

00000478 <__vector_18>:
	UART0_TX_Fptr = LocalFptr;
}


ISR(USART0_RX_vect)
{
 478:	1f 92       	push	r1
 47a:	0f 92       	push	r0
 47c:	0f b6       	in	r0, 0x3f	; 63
 47e:	0f 92       	push	r0
 480:	11 24       	eor	r1, r1
 482:	0b b6       	in	r0, 0x3b	; 59
 484:	0f 92       	push	r0
 486:	2f 93       	push	r18
 488:	3f 93       	push	r19
 48a:	4f 93       	push	r20
 48c:	5f 93       	push	r21
 48e:	6f 93       	push	r22
 490:	7f 93       	push	r23
 492:	8f 93       	push	r24
 494:	9f 93       	push	r25
 496:	af 93       	push	r26
 498:	bf 93       	push	r27
 49a:	ef 93       	push	r30
 49c:	ff 93       	push	r31
	if (UART0_RX_Fptr!=NULLPTR)
 49e:	e0 91 38 01 	lds	r30, 0x0138	; 0x800138 <UART0_RX_Fptr>
 4a2:	f0 91 39 01 	lds	r31, 0x0139	; 0x800139 <UART0_RX_Fptr+0x1>
 4a6:	30 97       	sbiw	r30, 0x00	; 0
 4a8:	09 f0       	breq	.+2      	; 0x4ac <__vector_18+0x34>
	{
		UART0_RX_Fptr();
 4aa:	09 95       	icall
	}
}
 4ac:	ff 91       	pop	r31
 4ae:	ef 91       	pop	r30
 4b0:	bf 91       	pop	r27
 4b2:	af 91       	pop	r26
 4b4:	9f 91       	pop	r25
 4b6:	8f 91       	pop	r24
 4b8:	7f 91       	pop	r23
 4ba:	6f 91       	pop	r22
 4bc:	5f 91       	pop	r21
 4be:	4f 91       	pop	r20
 4c0:	3f 91       	pop	r19
 4c2:	2f 91       	pop	r18
 4c4:	0f 90       	pop	r0
 4c6:	0b be       	out	0x3b, r0	; 59
 4c8:	0f 90       	pop	r0
 4ca:	0f be       	out	0x3f, r0	; 63
 4cc:	0f 90       	pop	r0
 4ce:	1f 90       	pop	r1
 4d0:	18 95       	reti

000004d2 <__vector_20>:

ISR(USART0_TX_vect)
{
 4d2:	1f 92       	push	r1
 4d4:	0f 92       	push	r0
 4d6:	0f b6       	in	r0, 0x3f	; 63
 4d8:	0f 92       	push	r0
 4da:	11 24       	eor	r1, r1
 4dc:	0b b6       	in	r0, 0x3b	; 59
 4de:	0f 92       	push	r0
 4e0:	2f 93       	push	r18
 4e2:	3f 93       	push	r19
 4e4:	4f 93       	push	r20
 4e6:	5f 93       	push	r21
 4e8:	6f 93       	push	r22
 4ea:	7f 93       	push	r23
 4ec:	8f 93       	push	r24
 4ee:	9f 93       	push	r25
 4f0:	af 93       	push	r26
 4f2:	bf 93       	push	r27
 4f4:	ef 93       	push	r30
 4f6:	ff 93       	push	r31
	if (UART0_TX_Fptr!=NULLPTR)
 4f8:	e0 91 36 01 	lds	r30, 0x0136	; 0x800136 <__data_end>
 4fc:	f0 91 37 01 	lds	r31, 0x0137	; 0x800137 <__data_end+0x1>
 500:	30 97       	sbiw	r30, 0x00	; 0
 502:	09 f0       	breq	.+2      	; 0x506 <__vector_20+0x34>
	{
		UART0_TX_Fptr();
 504:	09 95       	icall
	}
}	
 506:	ff 91       	pop	r31
 508:	ef 91       	pop	r30
 50a:	bf 91       	pop	r27
 50c:	af 91       	pop	r26
 50e:	9f 91       	pop	r25
 510:	8f 91       	pop	r24
 512:	7f 91       	pop	r23
 514:	6f 91       	pop	r22
 516:	5f 91       	pop	r21
 518:	4f 91       	pop	r20
 51a:	3f 91       	pop	r19
 51c:	2f 91       	pop	r18
 51e:	0f 90       	pop	r0
 520:	0b be       	out	0x3b, r0	; 59
 522:	0f 90       	pop	r0
 524:	0f be       	out	0x3f, r0	; 63
 526:	0f 90       	pop	r0
 528:	1f 90       	pop	r1
 52a:	18 95       	reti

0000052c <__vector_30>:
	UART1_TX_Fptr = LocalFptr;
}


ISR(USART1_RX_vect)
{
 52c:	1f 92       	push	r1
 52e:	0f 92       	push	r0
 530:	0f b6       	in	r0, 0x3f	; 63
 532:	0f 92       	push	r0
 534:	11 24       	eor	r1, r1
 536:	0b b6       	in	r0, 0x3b	; 59
 538:	0f 92       	push	r0
 53a:	2f 93       	push	r18
 53c:	3f 93       	push	r19
 53e:	4f 93       	push	r20
 540:	5f 93       	push	r21
 542:	6f 93       	push	r22
 544:	7f 93       	push	r23
 546:	8f 93       	push	r24
 548:	9f 93       	push	r25
 54a:	af 93       	push	r26
 54c:	bf 93       	push	r27
 54e:	ef 93       	push	r30
 550:	ff 93       	push	r31
	if (UART1_RX_Fptr!=NULLPTR)
 552:	e0 91 3c 01 	lds	r30, 0x013C	; 0x80013c <UART1_RX_Fptr>
 556:	f0 91 3d 01 	lds	r31, 0x013D	; 0x80013d <UART1_RX_Fptr+0x1>
 55a:	30 97       	sbiw	r30, 0x00	; 0
 55c:	09 f0       	breq	.+2      	; 0x560 <__vector_30+0x34>
	{
		UART1_RX_Fptr();
 55e:	09 95       	icall
	}
}
 560:	ff 91       	pop	r31
 562:	ef 91       	pop	r30
 564:	bf 91       	pop	r27
 566:	af 91       	pop	r26
 568:	9f 91       	pop	r25
 56a:	8f 91       	pop	r24
 56c:	7f 91       	pop	r23
 56e:	6f 91       	pop	r22
 570:	5f 91       	pop	r21
 572:	4f 91       	pop	r20
 574:	3f 91       	pop	r19
 576:	2f 91       	pop	r18
 578:	0f 90       	pop	r0
 57a:	0b be       	out	0x3b, r0	; 59
 57c:	0f 90       	pop	r0
 57e:	0f be       	out	0x3f, r0	; 63
 580:	0f 90       	pop	r0
 582:	1f 90       	pop	r1
 584:	18 95       	reti

00000586 <__vector_32>:

ISR(USART1_TX_vect)
{
 586:	1f 92       	push	r1
 588:	0f 92       	push	r0
 58a:	0f b6       	in	r0, 0x3f	; 63
 58c:	0f 92       	push	r0
 58e:	11 24       	eor	r1, r1
 590:	0b b6       	in	r0, 0x3b	; 59
 592:	0f 92       	push	r0
 594:	2f 93       	push	r18
 596:	3f 93       	push	r19
 598:	4f 93       	push	r20
 59a:	5f 93       	push	r21
 59c:	6f 93       	push	r22
 59e:	7f 93       	push	r23
 5a0:	8f 93       	push	r24
 5a2:	9f 93       	push	r25
 5a4:	af 93       	push	r26
 5a6:	bf 93       	push	r27
 5a8:	ef 93       	push	r30
 5aa:	ff 93       	push	r31
	if (UART1_TX_Fptr!=NULLPTR)
 5ac:	e0 91 3a 01 	lds	r30, 0x013A	; 0x80013a <UART1_TX_Fptr>
 5b0:	f0 91 3b 01 	lds	r31, 0x013B	; 0x80013b <UART1_TX_Fptr+0x1>
 5b4:	30 97       	sbiw	r30, 0x00	; 0
 5b6:	09 f0       	breq	.+2      	; 0x5ba <__vector_32+0x34>
	{
		UART1_TX_Fptr();
 5b8:	09 95       	icall
	}
}	
 5ba:	ff 91       	pop	r31
 5bc:	ef 91       	pop	r30
 5be:	bf 91       	pop	r27
 5c0:	af 91       	pop	r26
 5c2:	9f 91       	pop	r25
 5c4:	8f 91       	pop	r24
 5c6:	7f 91       	pop	r23
 5c8:	6f 91       	pop	r22
 5ca:	5f 91       	pop	r21
 5cc:	4f 91       	pop	r20
 5ce:	3f 91       	pop	r19
 5d0:	2f 91       	pop	r18
 5d2:	0f 90       	pop	r0
 5d4:	0b be       	out	0x3b, r0	; 59
 5d6:	0f 90       	pop	r0
 5d8:	0f be       	out	0x3f, r0	; 63
 5da:	0f 90       	pop	r0
 5dc:	1f 90       	pop	r1
 5de:	18 95       	reti

000005e0 <__tablejump2__>:
 5e0:	ee 0f       	add	r30, r30
 5e2:	ff 1f       	adc	r31, r31
 5e4:	00 24       	eor	r0, r0
 5e6:	00 1c       	adc	r0, r0
 5e8:	0b be       	out	0x3b, r0	; 59
 5ea:	07 90       	elpm	r0, Z+
 5ec:	f6 91       	elpm	r31, Z
 5ee:	e0 2d       	mov	r30, r0
 5f0:	09 94       	ijmp

000005f2 <_exit>:
 5f2:	f8 94       	cli

000005f4 <__stop_program>:
 5f4:	ff cf       	rjmp	.-2      	; 0x5f4 <__stop_program>
