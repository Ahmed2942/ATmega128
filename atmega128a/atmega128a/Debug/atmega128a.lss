
atmega128a.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000036  00800100  000009e6  00000a7a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000009e6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000076  00800136  00800136  00000ab0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000ab0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000ae0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000258  00000000  00000000  00000b20  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001e9f  00000000  00000000  00000d78  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ef4  00000000  00000000  00002c17  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001104  00000000  00000000  00003b0b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000558  00000000  00000000  00004c10  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000c13  00000000  00000000  00005168  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001856  00000000  00000000  00005d7b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001e0  00000000  00000000  000075d1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	23 c1       	rjmp	.+582    	; 0x248 <__ctors_end>
   2:	00 00       	nop
   4:	3e c1       	rjmp	.+636    	; 0x282 <__bad_interrupt>
   6:	00 00       	nop
   8:	3c c1       	rjmp	.+632    	; 0x282 <__bad_interrupt>
   a:	00 00       	nop
   c:	3a c1       	rjmp	.+628    	; 0x282 <__bad_interrupt>
   e:	00 00       	nop
  10:	38 c1       	rjmp	.+624    	; 0x282 <__bad_interrupt>
  12:	00 00       	nop
  14:	36 c1       	rjmp	.+620    	; 0x282 <__bad_interrupt>
  16:	00 00       	nop
  18:	34 c1       	rjmp	.+616    	; 0x282 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	32 c1       	rjmp	.+612    	; 0x282 <__bad_interrupt>
  1e:	00 00       	nop
  20:	30 c1       	rjmp	.+608    	; 0x282 <__bad_interrupt>
  22:	00 00       	nop
  24:	2e c1       	rjmp	.+604    	; 0x282 <__bad_interrupt>
  26:	00 00       	nop
  28:	2c c1       	rjmp	.+600    	; 0x282 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	2a c1       	rjmp	.+596    	; 0x282 <__bad_interrupt>
  2e:	00 00       	nop
  30:	28 c1       	rjmp	.+592    	; 0x282 <__bad_interrupt>
  32:	00 00       	nop
  34:	26 c1       	rjmp	.+588    	; 0x282 <__bad_interrupt>
  36:	00 00       	nop
  38:	24 c1       	rjmp	.+584    	; 0x282 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	22 c1       	rjmp	.+580    	; 0x282 <__bad_interrupt>
  3e:	00 00       	nop
  40:	20 c1       	rjmp	.+576    	; 0x282 <__bad_interrupt>
  42:	00 00       	nop
  44:	1e c1       	rjmp	.+572    	; 0x282 <__bad_interrupt>
  46:	00 00       	nop
  48:	0f c4       	rjmp	.+2078   	; 0x868 <__vector_18>
  4a:	00 00       	nop
  4c:	1a c1       	rjmp	.+564    	; 0x282 <__bad_interrupt>
  4e:	00 00       	nop
  50:	38 c4       	rjmp	.+2160   	; 0x8c2 <__vector_20>
  52:	00 00       	nop
  54:	16 c1       	rjmp	.+556    	; 0x282 <__bad_interrupt>
  56:	00 00       	nop
  58:	14 c1       	rjmp	.+552    	; 0x282 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	12 c1       	rjmp	.+548    	; 0x282 <__bad_interrupt>
  5e:	00 00       	nop
  60:	10 c1       	rjmp	.+544    	; 0x282 <__bad_interrupt>
  62:	00 00       	nop
  64:	0e c1       	rjmp	.+540    	; 0x282 <__bad_interrupt>
  66:	00 00       	nop
  68:	0c c1       	rjmp	.+536    	; 0x282 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	0a c1       	rjmp	.+532    	; 0x282 <__bad_interrupt>
  6e:	00 00       	nop
  70:	08 c1       	rjmp	.+528    	; 0x282 <__bad_interrupt>
  72:	00 00       	nop
  74:	06 c1       	rjmp	.+524    	; 0x282 <__bad_interrupt>
  76:	00 00       	nop
  78:	51 c4       	rjmp	.+2210   	; 0x91c <__vector_30>
  7a:	00 00       	nop
  7c:	02 c1       	rjmp	.+516    	; 0x282 <__bad_interrupt>
  7e:	00 00       	nop
  80:	7a c4       	rjmp	.+2292   	; 0x976 <__vector_32>
  82:	00 00       	nop
  84:	d3 c2       	rjmp	.+1446   	; 0x62c <__vector_33>
  86:	00 00       	nop
  88:	fc c0       	rjmp	.+504    	; 0x282 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	74 01       	movw	r14, r8
  8e:	81 01       	movw	r16, r2
  90:	8e 01       	movw	r16, r28
  92:	9b 01       	movw	r18, r22
  94:	a8 01       	movw	r20, r16
  96:	b5 01       	movw	r22, r10
  98:	c4 01       	movw	r24, r8
  9a:	dd 01       	movw	r26, r26
  9c:	ef 01       	movw	r28, r30
  9e:	01 02       	muls	r16, r17
  a0:	13 02       	muls	r17, r19
  a2:	25 02       	muls	r18, r21
  a4:	37 02       	muls	r19, r23
  a6:	4d 02       	muls	r20, r29
  a8:	6d 02       	muls	r22, r29
  aa:	7f 02       	muls	r23, r31
  ac:	91 02       	muls	r25, r17
  ae:	a3 02       	muls	r26, r19
  b0:	b5 02       	muls	r27, r21
  b2:	c7 02       	muls	r28, r23
  b4:	dd 02       	muls	r29, r29
  b6:	1e 04       	cpc	r1, r14
  b8:	21 04       	cpc	r2, r1
  ba:	21 04       	cpc	r2, r1
  bc:	21 04       	cpc	r2, r1
  be:	21 04       	cpc	r2, r1
  c0:	21 04       	cpc	r2, r1
  c2:	21 04       	cpc	r2, r1
  c4:	21 04       	cpc	r2, r1
  c6:	37 03       	mulsu	r19, r23
  c8:	21 04       	cpc	r2, r1
  ca:	21 04       	cpc	r2, r1
  cc:	21 04       	cpc	r2, r1
  ce:	21 04       	cpc	r2, r1
  d0:	21 04       	cpc	r2, r1
  d2:	21 04       	cpc	r2, r1
  d4:	21 04       	cpc	r2, r1
  d6:	37 03       	mulsu	r19, r23
  d8:	21 04       	cpc	r2, r1
  da:	21 04       	cpc	r2, r1
  dc:	21 04       	cpc	r2, r1
  de:	21 04       	cpc	r2, r1
  e0:	21 04       	cpc	r2, r1
  e2:	21 04       	cpc	r2, r1
  e4:	21 04       	cpc	r2, r1
  e6:	3f 03       	fmul	r19, r23
  e8:	21 04       	cpc	r2, r1
  ea:	21 04       	cpc	r2, r1
  ec:	21 04       	cpc	r2, r1
  ee:	21 04       	cpc	r2, r1
  f0:	21 04       	cpc	r2, r1
  f2:	21 04       	cpc	r2, r1
  f4:	21 04       	cpc	r2, r1
  f6:	64 03       	mulsu	r22, r20
  f8:	21 04       	cpc	r2, r1
  fa:	21 04       	cpc	r2, r1
  fc:	21 04       	cpc	r2, r1
  fe:	21 04       	cpc	r2, r1
 100:	21 04       	cpc	r2, r1
 102:	21 04       	cpc	r2, r1
 104:	21 04       	cpc	r2, r1
 106:	3f 03       	fmul	r19, r23
 108:	21 04       	cpc	r2, r1
 10a:	21 04       	cpc	r2, r1
 10c:	21 04       	cpc	r2, r1
 10e:	21 04       	cpc	r2, r1
 110:	21 04       	cpc	r2, r1
 112:	21 04       	cpc	r2, r1
 114:	21 04       	cpc	r2, r1
 116:	69 03       	fmul	r22, r17
 118:	21 04       	cpc	r2, r1
 11a:	21 04       	cpc	r2, r1
 11c:	21 04       	cpc	r2, r1
 11e:	21 04       	cpc	r2, r1
 120:	21 04       	cpc	r2, r1
 122:	21 04       	cpc	r2, r1
 124:	21 04       	cpc	r2, r1
 126:	6e 03       	fmul	r22, r22
 128:	21 04       	cpc	r2, r1
 12a:	21 04       	cpc	r2, r1
 12c:	21 04       	cpc	r2, r1
 12e:	21 04       	cpc	r2, r1
 130:	21 04       	cpc	r2, r1
 132:	21 04       	cpc	r2, r1
 134:	21 04       	cpc	r2, r1
 136:	7f 03       	fmul	r23, r23
 138:	21 04       	cpc	r2, r1
 13a:	21 04       	cpc	r2, r1
 13c:	21 04       	cpc	r2, r1
 13e:	21 04       	cpc	r2, r1
 140:	21 04       	cpc	r2, r1
 142:	21 04       	cpc	r2, r1
 144:	21 04       	cpc	r2, r1
 146:	a8 03       	fmulsu	r18, r16
 148:	21 04       	cpc	r2, r1
 14a:	21 04       	cpc	r2, r1
 14c:	21 04       	cpc	r2, r1
 14e:	21 04       	cpc	r2, r1
 150:	21 04       	cpc	r2, r1
 152:	21 04       	cpc	r2, r1
 154:	21 04       	cpc	r2, r1
 156:	73 03       	mulsu	r23, r19
 158:	21 04       	cpc	r2, r1
 15a:	21 04       	cpc	r2, r1
 15c:	21 04       	cpc	r2, r1
 15e:	21 04       	cpc	r2, r1
 160:	21 04       	cpc	r2, r1
 162:	21 04       	cpc	r2, r1
 164:	21 04       	cpc	r2, r1
 166:	8d 03       	fmulsu	r16, r21
 168:	21 04       	cpc	r2, r1
 16a:	21 04       	cpc	r2, r1
 16c:	21 04       	cpc	r2, r1
 16e:	21 04       	cpc	r2, r1
 170:	21 04       	cpc	r2, r1
 172:	21 04       	cpc	r2, r1
 174:	21 04       	cpc	r2, r1
 176:	aa 03       	fmulsu	r18, r18
 178:	21 04       	cpc	r2, r1
 17a:	21 04       	cpc	r2, r1
 17c:	21 04       	cpc	r2, r1
 17e:	21 04       	cpc	r2, r1
 180:	21 04       	cpc	r2, r1
 182:	21 04       	cpc	r2, r1
 184:	21 04       	cpc	r2, r1
 186:	aa 03       	fmulsu	r18, r18
 188:	21 04       	cpc	r2, r1
 18a:	21 04       	cpc	r2, r1
 18c:	21 04       	cpc	r2, r1
 18e:	21 04       	cpc	r2, r1
 190:	21 04       	cpc	r2, r1
 192:	21 04       	cpc	r2, r1
 194:	21 04       	cpc	r2, r1
 196:	aa 03       	fmulsu	r18, r18
 198:	21 04       	cpc	r2, r1
 19a:	21 04       	cpc	r2, r1
 19c:	21 04       	cpc	r2, r1
 19e:	21 04       	cpc	r2, r1
 1a0:	21 04       	cpc	r2, r1
 1a2:	21 04       	cpc	r2, r1
 1a4:	21 04       	cpc	r2, r1
 1a6:	aa 03       	fmulsu	r18, r18
 1a8:	21 04       	cpc	r2, r1
 1aa:	21 04       	cpc	r2, r1
 1ac:	21 04       	cpc	r2, r1
 1ae:	21 04       	cpc	r2, r1
 1b0:	21 04       	cpc	r2, r1
 1b2:	21 04       	cpc	r2, r1
 1b4:	21 04       	cpc	r2, r1
 1b6:	b3 03       	fmuls	r19, r19
 1b8:	21 04       	cpc	r2, r1
 1ba:	21 04       	cpc	r2, r1
 1bc:	21 04       	cpc	r2, r1
 1be:	21 04       	cpc	r2, r1
 1c0:	21 04       	cpc	r2, r1
 1c2:	21 04       	cpc	r2, r1
 1c4:	21 04       	cpc	r2, r1
 1c6:	e5 03       	fmuls	r22, r21
 1c8:	21 04       	cpc	r2, r1
 1ca:	21 04       	cpc	r2, r1
 1cc:	21 04       	cpc	r2, r1
 1ce:	21 04       	cpc	r2, r1
 1d0:	21 04       	cpc	r2, r1
 1d2:	21 04       	cpc	r2, r1
 1d4:	21 04       	cpc	r2, r1
 1d6:	b3 03       	fmuls	r19, r19
 1d8:	21 04       	cpc	r2, r1
 1da:	21 04       	cpc	r2, r1
 1dc:	21 04       	cpc	r2, r1
 1de:	21 04       	cpc	r2, r1
 1e0:	21 04       	cpc	r2, r1
 1e2:	21 04       	cpc	r2, r1
 1e4:	21 04       	cpc	r2, r1
 1e6:	e5 03       	fmuls	r22, r21
 1e8:	21 04       	cpc	r2, r1
 1ea:	21 04       	cpc	r2, r1
 1ec:	21 04       	cpc	r2, r1
 1ee:	21 04       	cpc	r2, r1
 1f0:	21 04       	cpc	r2, r1
 1f2:	21 04       	cpc	r2, r1
 1f4:	21 04       	cpc	r2, r1
 1f6:	cb 03       	fmulsu	r20, r19
 1f8:	21 04       	cpc	r2, r1
 1fa:	21 04       	cpc	r2, r1
 1fc:	21 04       	cpc	r2, r1
 1fe:	21 04       	cpc	r2, r1
 200:	21 04       	cpc	r2, r1
 202:	21 04       	cpc	r2, r1
 204:	21 04       	cpc	r2, r1
 206:	e9 03       	fmulsu	r22, r17
 208:	21 04       	cpc	r2, r1
 20a:	21 04       	cpc	r2, r1
 20c:	21 04       	cpc	r2, r1
 20e:	21 04       	cpc	r2, r1
 210:	21 04       	cpc	r2, r1
 212:	21 04       	cpc	r2, r1
 214:	21 04       	cpc	r2, r1
 216:	e9 03       	fmulsu	r22, r17
 218:	21 04       	cpc	r2, r1
 21a:	21 04       	cpc	r2, r1
 21c:	21 04       	cpc	r2, r1
 21e:	21 04       	cpc	r2, r1
 220:	21 04       	cpc	r2, r1
 222:	21 04       	cpc	r2, r1
 224:	21 04       	cpc	r2, r1
 226:	fe 03       	fmulsu	r23, r22
 228:	21 04       	cpc	r2, r1
 22a:	21 04       	cpc	r2, r1
 22c:	21 04       	cpc	r2, r1
 22e:	21 04       	cpc	r2, r1
 230:	21 04       	cpc	r2, r1
 232:	21 04       	cpc	r2, r1
 234:	21 04       	cpc	r2, r1
 236:	18 04       	cpc	r1, r8
 238:	21 04       	cpc	r2, r1
 23a:	21 04       	cpc	r2, r1
 23c:	21 04       	cpc	r2, r1
 23e:	21 04       	cpc	r2, r1
 240:	21 04       	cpc	r2, r1
 242:	21 04       	cpc	r2, r1
 244:	21 04       	cpc	r2, r1
 246:	18 04       	cpc	r1, r8

00000248 <__ctors_end>:
 248:	11 24       	eor	r1, r1
 24a:	1f be       	out	0x3f, r1	; 63
 24c:	cf ef       	ldi	r28, 0xFF	; 255
 24e:	d0 e1       	ldi	r29, 0x10	; 16
 250:	de bf       	out	0x3e, r29	; 62
 252:	cd bf       	out	0x3d, r28	; 61

00000254 <__do_copy_data>:
 254:	11 e0       	ldi	r17, 0x01	; 1
 256:	a0 e0       	ldi	r26, 0x00	; 0
 258:	b1 e0       	ldi	r27, 0x01	; 1
 25a:	e6 ee       	ldi	r30, 0xE6	; 230
 25c:	f9 e0       	ldi	r31, 0x09	; 9
 25e:	00 e0       	ldi	r16, 0x00	; 0
 260:	0b bf       	out	0x3b, r16	; 59
 262:	02 c0       	rjmp	.+4      	; 0x268 <__do_copy_data+0x14>
 264:	07 90       	elpm	r0, Z+
 266:	0d 92       	st	X+, r0
 268:	a6 33       	cpi	r26, 0x36	; 54
 26a:	b1 07       	cpc	r27, r17
 26c:	d9 f7       	brne	.-10     	; 0x264 <__do_copy_data+0x10>

0000026e <__do_clear_bss>:
 26e:	21 e0       	ldi	r18, 0x01	; 1
 270:	a6 e3       	ldi	r26, 0x36	; 54
 272:	b1 e0       	ldi	r27, 0x01	; 1
 274:	01 c0       	rjmp	.+2      	; 0x278 <.do_clear_bss_start>

00000276 <.do_clear_bss_loop>:
 276:	1d 92       	st	X+, r1

00000278 <.do_clear_bss_start>:
 278:	ac 3a       	cpi	r26, 0xAC	; 172
 27a:	b2 07       	cpc	r27, r18
 27c:	e1 f7       	brne	.-8      	; 0x276 <.do_clear_bss_loop>
 27e:	02 d0       	rcall	.+4      	; 0x284 <main>
 280:	b0 c3       	rjmp	.+1888   	; 0x9e2 <_exit>

00000282 <__bad_interrupt>:
 282:	be ce       	rjmp	.-644    	; 0x0 <__vectors>

00000284 <main>:
#include "ADC.h"
#include "Sensors.h"

int main(void)
{
   DIO_Init();
 284:	b0 d1       	rcall	.+864    	; 0x5e6 <DIO_Init>
   ADC_Init(REF_VCC,ADC_SCALER_64);
 286:	66 e0       	ldi	r22, 0x06	; 6
 288:	80 e0       	ldi	r24, 0x00	; 0
 28a:	01 d0       	rcall	.+2      	; 0x28e <ADC_Init>
 28c:	ff cf       	rjmp	.-2      	; 0x28c <main+0x8>

0000028e <ADC_Init>:
u8 static READ_Flag=0;

void ADC_Init(ADC_Ref_type vref,ADC_Scalar_type scaler)
{
    // select v ref
	switch(vref)
 28e:	81 30       	cpi	r24, 0x01	; 1
 290:	39 f0       	breq	.+14     	; 0x2a0 <ADC_Init+0x12>
 292:	18 f0       	brcs	.+6      	; 0x29a <ADC_Init+0xc>
 294:	82 30       	cpi	r24, 0x02	; 2
 296:	39 f0       	breq	.+14     	; 0x2a6 <ADC_Init+0x18>
 298:	08 c0       	rjmp	.+16     	; 0x2aa <ADC_Init+0x1c>
	{
		
	case REF_VCC:
	SET_BIT(ADMUX,REFS0);
 29a:	3e 9a       	sbi	0x07, 6	; 7
	CLEAR_BIT(ADMUX,REFS1);
 29c:	3f 98       	cbi	0x07, 7	; 7
	break;
 29e:	05 c0       	rjmp	.+10     	; 0x2aa <ADC_Init+0x1c>
	case REF_AREF:
	CLEAR_BIT(ADMUX,REFS0);
 2a0:	3e 98       	cbi	0x07, 6	; 7
	CLEAR_BIT(ADMUX,REFS1);
 2a2:	3f 98       	cbi	0x07, 7	; 7
	break;
 2a4:	02 c0       	rjmp	.+4      	; 0x2aa <ADC_Init+0x1c>
	case RE_256V :
	SET_BIT(ADMUX,REFS0);
 2a6:	3e 9a       	sbi	0x07, 6	; 7
	SET_BIT(ADMUX,REFS1);
 2a8:	3f 9a       	sbi	0x07, 7	; 7
	break;
	}
	
	//Scaler test
	ADCSRA=ADCSRA & 0XF8;
 2aa:	86 b1       	in	r24, 0x06	; 6
 2ac:	88 7f       	andi	r24, 0xF8	; 248
 2ae:	86 b9       	out	0x06, r24	; 6
	ADCSRA=ADCSRA |scaler;
 2b0:	86 b1       	in	r24, 0x06	; 6
 2b2:	68 2b       	or	r22, r24
 2b4:	66 b9       	out	0x06, r22	; 6
	
	// enable 
	SET_BIT(ADCSRA,ADEN);  // we write it at the end of the function ,because if we write it at the start of the fun ADC will operate with the previous features 
 2b6:	37 9a       	sbi	0x06, 7	; 6
 2b8:	08 95       	ret

000002ba <DIO_Initpin>:
 }

 void DIO_Initpin(DIO_Pin_type pin,DIO_Pinstastus_type status)
 {
	 
	 DIO_Port_type PORT=pin/8;
 2ba:	e8 2f       	mov	r30, r24
 2bc:	e6 95       	lsr	r30
 2be:	e6 95       	lsr	r30
 2c0:	e6 95       	lsr	r30
	 u8 pin_num=pin%8;
 2c2:	87 70       	andi	r24, 0x07	; 7
	 switch(status)
 2c4:	61 30       	cpi	r22, 0x01	; 1
 2c6:	09 f4       	brne	.+2      	; 0x2ca <DIO_Initpin+0x10>
 2c8:	6e c0       	rjmp	.+220    	; 0x3a6 <DIO_Initpin+0xec>
 2ca:	20 f0       	brcs	.+8      	; 0x2d4 <DIO_Initpin+0x1a>
 2cc:	62 30       	cpi	r22, 0x02	; 2
 2ce:	09 f4       	brne	.+2      	; 0x2d2 <DIO_Initpin+0x18>
 2d0:	fa c0       	rjmp	.+500    	; 0x4c6 <__LOCK_REGION_LENGTH__+0xc6>
 2d2:	08 95       	ret
	 {
		 case OUTPUT:
		 switch(PORT)
 2d4:	4e 2f       	mov	r20, r30
 2d6:	50 e0       	ldi	r21, 0x00	; 0
 2d8:	47 30       	cpi	r20, 0x07	; 7
 2da:	51 05       	cpc	r21, r1
 2dc:	08 f0       	brcs	.+2      	; 0x2e0 <DIO_Initpin+0x26>
 2de:	82 c1       	rjmp	.+772    	; 0x5e4 <__LOCK_REGION_LENGTH__+0x1e4>
 2e0:	fa 01       	movw	r30, r20
 2e2:	ea 5b       	subi	r30, 0xBA	; 186
 2e4:	ff 4f       	sbci	r31, 0xFF	; 255
 2e6:	74 c3       	rjmp	.+1768   	; 0x9d0 <__tablejump2__>
		 {
			 case PA:
			 SET_BIT(DDRA,pin_num);
 2e8:	4a b3       	in	r20, 0x1a	; 26
 2ea:	21 e0       	ldi	r18, 0x01	; 1
 2ec:	30 e0       	ldi	r19, 0x00	; 0
 2ee:	b9 01       	movw	r22, r18
 2f0:	02 c0       	rjmp	.+4      	; 0x2f6 <DIO_Initpin+0x3c>
 2f2:	66 0f       	add	r22, r22
 2f4:	77 1f       	adc	r23, r23
 2f6:	8a 95       	dec	r24
 2f8:	e2 f7       	brpl	.-8      	; 0x2f2 <DIO_Initpin+0x38>
 2fa:	cb 01       	movw	r24, r22
 2fc:	84 2b       	or	r24, r20
 2fe:	8a bb       	out	0x1a, r24	; 26
			 break;
 300:	08 95       	ret
			 case PB:
			 SET_BIT(DDRB,pin_num);
 302:	47 b3       	in	r20, 0x17	; 23
 304:	21 e0       	ldi	r18, 0x01	; 1
 306:	30 e0       	ldi	r19, 0x00	; 0
 308:	b9 01       	movw	r22, r18
 30a:	02 c0       	rjmp	.+4      	; 0x310 <DIO_Initpin+0x56>
 30c:	66 0f       	add	r22, r22
 30e:	77 1f       	adc	r23, r23
 310:	8a 95       	dec	r24
 312:	e2 f7       	brpl	.-8      	; 0x30c <DIO_Initpin+0x52>
 314:	cb 01       	movw	r24, r22
 316:	84 2b       	or	r24, r20
 318:	87 bb       	out	0x17, r24	; 23
			 break;
 31a:	08 95       	ret
			 case PC:
			 SET_BIT(DDRC,pin_num);
 31c:	44 b3       	in	r20, 0x14	; 20
 31e:	21 e0       	ldi	r18, 0x01	; 1
 320:	30 e0       	ldi	r19, 0x00	; 0
 322:	b9 01       	movw	r22, r18
 324:	02 c0       	rjmp	.+4      	; 0x32a <DIO_Initpin+0x70>
 326:	66 0f       	add	r22, r22
 328:	77 1f       	adc	r23, r23
 32a:	8a 95       	dec	r24
 32c:	e2 f7       	brpl	.-8      	; 0x326 <DIO_Initpin+0x6c>
 32e:	cb 01       	movw	r24, r22
 330:	84 2b       	or	r24, r20
 332:	84 bb       	out	0x14, r24	; 20
			 break;
 334:	08 95       	ret
			 case PD:
			 SET_BIT(DDRD,pin_num);
 336:	41 b3       	in	r20, 0x11	; 17
 338:	21 e0       	ldi	r18, 0x01	; 1
 33a:	30 e0       	ldi	r19, 0x00	; 0
 33c:	b9 01       	movw	r22, r18
 33e:	02 c0       	rjmp	.+4      	; 0x344 <DIO_Initpin+0x8a>
 340:	66 0f       	add	r22, r22
 342:	77 1f       	adc	r23, r23
 344:	8a 95       	dec	r24
 346:	e2 f7       	brpl	.-8      	; 0x340 <DIO_Initpin+0x86>
 348:	cb 01       	movw	r24, r22
 34a:	84 2b       	or	r24, r20
 34c:	81 bb       	out	0x11, r24	; 17
			 break;
 34e:	08 95       	ret
			 case PE:
			 SET_BIT(DDRE,pin_num);
 350:	42 b1       	in	r20, 0x02	; 2
 352:	21 e0       	ldi	r18, 0x01	; 1
 354:	30 e0       	ldi	r19, 0x00	; 0
 356:	b9 01       	movw	r22, r18
 358:	02 c0       	rjmp	.+4      	; 0x35e <DIO_Initpin+0xa4>
 35a:	66 0f       	add	r22, r22
 35c:	77 1f       	adc	r23, r23
 35e:	8a 95       	dec	r24
 360:	e2 f7       	brpl	.-8      	; 0x35a <DIO_Initpin+0xa0>
 362:	cb 01       	movw	r24, r22
 364:	84 2b       	or	r24, r20
 366:	82 b9       	out	0x02, r24	; 2
			 break;
 368:	08 95       	ret
			 case PF:
			 SET_BIT(DDRF,pin_num);
 36a:	e1 e6       	ldi	r30, 0x61	; 97
 36c:	f0 e0       	ldi	r31, 0x00	; 0
 36e:	40 81       	ld	r20, Z
 370:	21 e0       	ldi	r18, 0x01	; 1
 372:	30 e0       	ldi	r19, 0x00	; 0
 374:	b9 01       	movw	r22, r18
 376:	02 c0       	rjmp	.+4      	; 0x37c <DIO_Initpin+0xc2>
 378:	66 0f       	add	r22, r22
 37a:	77 1f       	adc	r23, r23
 37c:	8a 95       	dec	r24
 37e:	e2 f7       	brpl	.-8      	; 0x378 <DIO_Initpin+0xbe>
 380:	cb 01       	movw	r24, r22
 382:	84 2b       	or	r24, r20
 384:	80 83       	st	Z, r24
			 break;
 386:	08 95       	ret
			 case PG:
			 SET_BIT(DDRG,pin_num);
 388:	e4 e6       	ldi	r30, 0x64	; 100
 38a:	f0 e0       	ldi	r31, 0x00	; 0
 38c:	40 81       	ld	r20, Z
 38e:	21 e0       	ldi	r18, 0x01	; 1
 390:	30 e0       	ldi	r19, 0x00	; 0
 392:	b9 01       	movw	r22, r18
 394:	02 c0       	rjmp	.+4      	; 0x39a <DIO_Initpin+0xe0>
 396:	66 0f       	add	r22, r22
 398:	77 1f       	adc	r23, r23
 39a:	8a 95       	dec	r24
 39c:	e2 f7       	brpl	.-8      	; 0x396 <DIO_Initpin+0xdc>
 39e:	cb 01       	movw	r24, r22
 3a0:	84 2b       	or	r24, r20
 3a2:	80 83       	st	Z, r24
			 break;
 3a4:	08 95       	ret
			 
		 }
		 break;
		 
		 case INFREE:
		 switch(PORT)
 3a6:	4e 2f       	mov	r20, r30
 3a8:	50 e0       	ldi	r21, 0x00	; 0
 3aa:	47 30       	cpi	r20, 0x07	; 7
 3ac:	51 05       	cpc	r21, r1
 3ae:	08 f0       	brcs	.+2      	; 0x3b2 <DIO_Initpin+0xf8>
 3b0:	19 c1       	rjmp	.+562    	; 0x5e4 <__LOCK_REGION_LENGTH__+0x1e4>
 3b2:	fa 01       	movw	r30, r20
 3b4:	e3 5b       	subi	r30, 0xB3	; 179
 3b6:	ff 4f       	sbci	r31, 0xFF	; 255
 3b8:	0b c3       	rjmp	.+1558   	; 0x9d0 <__tablejump2__>
		 {
			 case PA:
			 CLEAR_BIT(DDRA,pin_num);
 3ba:	4a b3       	in	r20, 0x1a	; 26
 3bc:	21 e0       	ldi	r18, 0x01	; 1
 3be:	30 e0       	ldi	r19, 0x00	; 0
 3c0:	b9 01       	movw	r22, r18
 3c2:	02 c0       	rjmp	.+4      	; 0x3c8 <DIO_Initpin+0x10e>
 3c4:	66 0f       	add	r22, r22
 3c6:	77 1f       	adc	r23, r23
 3c8:	8a 95       	dec	r24
 3ca:	e2 f7       	brpl	.-8      	; 0x3c4 <DIO_Initpin+0x10a>
 3cc:	cb 01       	movw	r24, r22
 3ce:	80 95       	com	r24
 3d0:	94 2f       	mov	r25, r20
 3d2:	98 23       	and	r25, r24
 3d4:	9a bb       	out	0x1a, r25	; 26
			 CLEAR_BIT(PORTA,pin_num);
 3d6:	9b b3       	in	r25, 0x1b	; 27
 3d8:	89 23       	and	r24, r25
 3da:	8b bb       	out	0x1b, r24	; 27
			 break;
 3dc:	08 95       	ret
			 
			 case PB:
			 CLEAR_BIT(DDRB,pin_num);
 3de:	47 b3       	in	r20, 0x17	; 23
 3e0:	21 e0       	ldi	r18, 0x01	; 1
 3e2:	30 e0       	ldi	r19, 0x00	; 0
 3e4:	b9 01       	movw	r22, r18
 3e6:	02 c0       	rjmp	.+4      	; 0x3ec <DIO_Initpin+0x132>
 3e8:	66 0f       	add	r22, r22
 3ea:	77 1f       	adc	r23, r23
 3ec:	8a 95       	dec	r24
 3ee:	e2 f7       	brpl	.-8      	; 0x3e8 <DIO_Initpin+0x12e>
 3f0:	cb 01       	movw	r24, r22
 3f2:	80 95       	com	r24
 3f4:	94 2f       	mov	r25, r20
 3f6:	98 23       	and	r25, r24
 3f8:	97 bb       	out	0x17, r25	; 23
			 CLEAR_BIT(PORTB,pin_num);
 3fa:	98 b3       	in	r25, 0x18	; 24
 3fc:	89 23       	and	r24, r25
 3fe:	88 bb       	out	0x18, r24	; 24
			 break;
 400:	08 95       	ret
			 
			 case PC:
			 CLEAR_BIT(DDRC,pin_num);
 402:	44 b3       	in	r20, 0x14	; 20
 404:	21 e0       	ldi	r18, 0x01	; 1
 406:	30 e0       	ldi	r19, 0x00	; 0
 408:	b9 01       	movw	r22, r18
 40a:	02 c0       	rjmp	.+4      	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 40c:	66 0f       	add	r22, r22
 40e:	77 1f       	adc	r23, r23
 410:	8a 95       	dec	r24
 412:	e2 f7       	brpl	.-8      	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 414:	cb 01       	movw	r24, r22
 416:	80 95       	com	r24
 418:	94 2f       	mov	r25, r20
 41a:	98 23       	and	r25, r24
 41c:	94 bb       	out	0x14, r25	; 20
			 CLEAR_BIT(PORTC,pin_num);
 41e:	95 b3       	in	r25, 0x15	; 21
 420:	89 23       	and	r24, r25
 422:	85 bb       	out	0x15, r24	; 21
			 break;
 424:	08 95       	ret
			 
			 case PD:
			 CLEAR_BIT(DDRD,pin_num);
 426:	41 b3       	in	r20, 0x11	; 17
 428:	21 e0       	ldi	r18, 0x01	; 1
 42a:	30 e0       	ldi	r19, 0x00	; 0
 42c:	b9 01       	movw	r22, r18
 42e:	02 c0       	rjmp	.+4      	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
 430:	66 0f       	add	r22, r22
 432:	77 1f       	adc	r23, r23
 434:	8a 95       	dec	r24
 436:	e2 f7       	brpl	.-8      	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
 438:	cb 01       	movw	r24, r22
 43a:	80 95       	com	r24
 43c:	94 2f       	mov	r25, r20
 43e:	98 23       	and	r25, r24
 440:	91 bb       	out	0x11, r25	; 17
			 CLEAR_BIT(PORTD,pin_num);
 442:	92 b3       	in	r25, 0x12	; 18
 444:	89 23       	and	r24, r25
 446:	82 bb       	out	0x12, r24	; 18
			 break;
 448:	08 95       	ret
			 
			 case PE:
			 CLEAR_BIT(DDRE,pin_num);
 44a:	42 b1       	in	r20, 0x02	; 2
 44c:	21 e0       	ldi	r18, 0x01	; 1
 44e:	30 e0       	ldi	r19, 0x00	; 0
 450:	b9 01       	movw	r22, r18
 452:	02 c0       	rjmp	.+4      	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
 454:	66 0f       	add	r22, r22
 456:	77 1f       	adc	r23, r23
 458:	8a 95       	dec	r24
 45a:	e2 f7       	brpl	.-8      	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
 45c:	cb 01       	movw	r24, r22
 45e:	80 95       	com	r24
 460:	94 2f       	mov	r25, r20
 462:	98 23       	and	r25, r24
 464:	92 b9       	out	0x02, r25	; 2
		     CLEAR_BIT(PORTE,pin_num);
 466:	93 b1       	in	r25, 0x03	; 3
 468:	89 23       	and	r24, r25
 46a:	83 b9       	out	0x03, r24	; 3
		     break;
 46c:	08 95       	ret
			 
			 case PF:
		     CLEAR_BIT(DDRF,pin_num);
 46e:	e1 e6       	ldi	r30, 0x61	; 97
 470:	f0 e0       	ldi	r31, 0x00	; 0
 472:	40 81       	ld	r20, Z
 474:	21 e0       	ldi	r18, 0x01	; 1
 476:	30 e0       	ldi	r19, 0x00	; 0
 478:	b9 01       	movw	r22, r18
 47a:	02 c0       	rjmp	.+4      	; 0x480 <__LOCK_REGION_LENGTH__+0x80>
 47c:	66 0f       	add	r22, r22
 47e:	77 1f       	adc	r23, r23
 480:	8a 95       	dec	r24
 482:	e2 f7       	brpl	.-8      	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
 484:	cb 01       	movw	r24, r22
 486:	80 95       	com	r24
 488:	94 2f       	mov	r25, r20
 48a:	98 23       	and	r25, r24
 48c:	90 83       	st	Z, r25
		     CLEAR_BIT(PORTF,pin_num);
 48e:	e2 e6       	ldi	r30, 0x62	; 98
 490:	f0 e0       	ldi	r31, 0x00	; 0
 492:	90 81       	ld	r25, Z
 494:	89 23       	and	r24, r25
 496:	80 83       	st	Z, r24
		     break;
 498:	08 95       	ret
			 
			 case PG:
			 CLEAR_BIT(DDRG,pin_num);
 49a:	e4 e6       	ldi	r30, 0x64	; 100
 49c:	f0 e0       	ldi	r31, 0x00	; 0
 49e:	40 81       	ld	r20, Z
 4a0:	21 e0       	ldi	r18, 0x01	; 1
 4a2:	30 e0       	ldi	r19, 0x00	; 0
 4a4:	b9 01       	movw	r22, r18
 4a6:	02 c0       	rjmp	.+4      	; 0x4ac <__LOCK_REGION_LENGTH__+0xac>
 4a8:	66 0f       	add	r22, r22
 4aa:	77 1f       	adc	r23, r23
 4ac:	8a 95       	dec	r24
 4ae:	e2 f7       	brpl	.-8      	; 0x4a8 <__LOCK_REGION_LENGTH__+0xa8>
 4b0:	cb 01       	movw	r24, r22
 4b2:	80 95       	com	r24
 4b4:	94 2f       	mov	r25, r20
 4b6:	98 23       	and	r25, r24
 4b8:	90 83       	st	Z, r25
			 CLEAR_BIT(PORTG,pin_num);
 4ba:	e5 e6       	ldi	r30, 0x65	; 101
 4bc:	f0 e0       	ldi	r31, 0x00	; 0
 4be:	90 81       	ld	r25, Z
 4c0:	89 23       	and	r24, r25
 4c2:	80 83       	st	Z, r24
			 break;
 4c4:	08 95       	ret
		 }
		 break;
		 
		 case INPULL:
		 switch(PORT)
 4c6:	4e 2f       	mov	r20, r30
 4c8:	50 e0       	ldi	r21, 0x00	; 0
 4ca:	47 30       	cpi	r20, 0x07	; 7
 4cc:	51 05       	cpc	r21, r1
 4ce:	08 f0       	brcs	.+2      	; 0x4d2 <__LOCK_REGION_LENGTH__+0xd2>
 4d0:	89 c0       	rjmp	.+274    	; 0x5e4 <__LOCK_REGION_LENGTH__+0x1e4>
 4d2:	fa 01       	movw	r30, r20
 4d4:	ec 5a       	subi	r30, 0xAC	; 172
 4d6:	ff 4f       	sbci	r31, 0xFF	; 255
 4d8:	7b c2       	rjmp	.+1270   	; 0x9d0 <__tablejump2__>
		 {
			 case PA:
			 CLEAR_BIT(DDRA,pin_num);
 4da:	4a b3       	in	r20, 0x1a	; 26
 4dc:	21 e0       	ldi	r18, 0x01	; 1
 4de:	30 e0       	ldi	r19, 0x00	; 0
 4e0:	b9 01       	movw	r22, r18
 4e2:	02 c0       	rjmp	.+4      	; 0x4e8 <__LOCK_REGION_LENGTH__+0xe8>
 4e4:	66 0f       	add	r22, r22
 4e6:	77 1f       	adc	r23, r23
 4e8:	8a 95       	dec	r24
 4ea:	e2 f7       	brpl	.-8      	; 0x4e4 <__LOCK_REGION_LENGTH__+0xe4>
 4ec:	cb 01       	movw	r24, r22
 4ee:	96 2f       	mov	r25, r22
 4f0:	90 95       	com	r25
 4f2:	94 23       	and	r25, r20
 4f4:	9a bb       	out	0x1a, r25	; 26
			 SET_BIT(PORTA,pin_num);
 4f6:	9b b3       	in	r25, 0x1b	; 27
 4f8:	89 2b       	or	r24, r25
 4fa:	8b bb       	out	0x1b, r24	; 27
			 break;
 4fc:	08 95       	ret
			 
			 case PB:
			 CLEAR_BIT(DDRB,pin_num);
 4fe:	47 b3       	in	r20, 0x17	; 23
 500:	21 e0       	ldi	r18, 0x01	; 1
 502:	30 e0       	ldi	r19, 0x00	; 0
 504:	b9 01       	movw	r22, r18
 506:	02 c0       	rjmp	.+4      	; 0x50c <__LOCK_REGION_LENGTH__+0x10c>
 508:	66 0f       	add	r22, r22
 50a:	77 1f       	adc	r23, r23
 50c:	8a 95       	dec	r24
 50e:	e2 f7       	brpl	.-8      	; 0x508 <__LOCK_REGION_LENGTH__+0x108>
 510:	cb 01       	movw	r24, r22
 512:	96 2f       	mov	r25, r22
 514:	90 95       	com	r25
 516:	94 23       	and	r25, r20
 518:	97 bb       	out	0x17, r25	; 23
			 SET_BIT(PORTB,pin_num);
 51a:	98 b3       	in	r25, 0x18	; 24
 51c:	89 2b       	or	r24, r25
 51e:	88 bb       	out	0x18, r24	; 24
			 break;
 520:	08 95       	ret
			 
			 case PC:
			 CLEAR_BIT(DDRC,pin_num);
 522:	44 b3       	in	r20, 0x14	; 20
 524:	21 e0       	ldi	r18, 0x01	; 1
 526:	30 e0       	ldi	r19, 0x00	; 0
 528:	b9 01       	movw	r22, r18
 52a:	02 c0       	rjmp	.+4      	; 0x530 <__LOCK_REGION_LENGTH__+0x130>
 52c:	66 0f       	add	r22, r22
 52e:	77 1f       	adc	r23, r23
 530:	8a 95       	dec	r24
 532:	e2 f7       	brpl	.-8      	; 0x52c <__LOCK_REGION_LENGTH__+0x12c>
 534:	cb 01       	movw	r24, r22
 536:	96 2f       	mov	r25, r22
 538:	90 95       	com	r25
 53a:	94 23       	and	r25, r20
 53c:	94 bb       	out	0x14, r25	; 20
			 SET_BIT(PORTC,pin_num);
 53e:	95 b3       	in	r25, 0x15	; 21
 540:	89 2b       	or	r24, r25
 542:	85 bb       	out	0x15, r24	; 21
			 break;
 544:	08 95       	ret
			 
			 case PD:
			 CLEAR_BIT(DDRD,pin_num);
 546:	41 b3       	in	r20, 0x11	; 17
 548:	21 e0       	ldi	r18, 0x01	; 1
 54a:	30 e0       	ldi	r19, 0x00	; 0
 54c:	b9 01       	movw	r22, r18
 54e:	02 c0       	rjmp	.+4      	; 0x554 <__LOCK_REGION_LENGTH__+0x154>
 550:	66 0f       	add	r22, r22
 552:	77 1f       	adc	r23, r23
 554:	8a 95       	dec	r24
 556:	e2 f7       	brpl	.-8      	; 0x550 <__LOCK_REGION_LENGTH__+0x150>
 558:	cb 01       	movw	r24, r22
 55a:	96 2f       	mov	r25, r22
 55c:	90 95       	com	r25
 55e:	94 23       	and	r25, r20
 560:	91 bb       	out	0x11, r25	; 17
			 SET_BIT(PORTD,pin_num);
 562:	92 b3       	in	r25, 0x12	; 18
 564:	89 2b       	or	r24, r25
 566:	82 bb       	out	0x12, r24	; 18
			 break;
 568:	08 95       	ret
			 
			 case PE:
			 CLEAR_BIT(DDRE,pin_num);
 56a:	42 b1       	in	r20, 0x02	; 2
 56c:	21 e0       	ldi	r18, 0x01	; 1
 56e:	30 e0       	ldi	r19, 0x00	; 0
 570:	b9 01       	movw	r22, r18
 572:	02 c0       	rjmp	.+4      	; 0x578 <__LOCK_REGION_LENGTH__+0x178>
 574:	66 0f       	add	r22, r22
 576:	77 1f       	adc	r23, r23
 578:	8a 95       	dec	r24
 57a:	e2 f7       	brpl	.-8      	; 0x574 <__LOCK_REGION_LENGTH__+0x174>
 57c:	cb 01       	movw	r24, r22
 57e:	96 2f       	mov	r25, r22
 580:	90 95       	com	r25
 582:	94 23       	and	r25, r20
 584:	92 b9       	out	0x02, r25	; 2
			 SET_BIT(PORTE,pin_num);
 586:	93 b1       	in	r25, 0x03	; 3
 588:	89 2b       	or	r24, r25
 58a:	83 b9       	out	0x03, r24	; 3
			 break;
 58c:	08 95       	ret
			 
			 case PF:
			 CLEAR_BIT(DDRF,pin_num);
 58e:	e1 e6       	ldi	r30, 0x61	; 97
 590:	f0 e0       	ldi	r31, 0x00	; 0
 592:	40 81       	ld	r20, Z
 594:	21 e0       	ldi	r18, 0x01	; 1
 596:	30 e0       	ldi	r19, 0x00	; 0
 598:	b9 01       	movw	r22, r18
 59a:	02 c0       	rjmp	.+4      	; 0x5a0 <__LOCK_REGION_LENGTH__+0x1a0>
 59c:	66 0f       	add	r22, r22
 59e:	77 1f       	adc	r23, r23
 5a0:	8a 95       	dec	r24
 5a2:	e2 f7       	brpl	.-8      	; 0x59c <__LOCK_REGION_LENGTH__+0x19c>
 5a4:	cb 01       	movw	r24, r22
 5a6:	96 2f       	mov	r25, r22
 5a8:	90 95       	com	r25
 5aa:	94 23       	and	r25, r20
 5ac:	90 83       	st	Z, r25
			 SET_BIT(PORTF,pin_num);
 5ae:	e2 e6       	ldi	r30, 0x62	; 98
 5b0:	f0 e0       	ldi	r31, 0x00	; 0
 5b2:	90 81       	ld	r25, Z
 5b4:	89 2b       	or	r24, r25
 5b6:	80 83       	st	Z, r24
			 break;
 5b8:	08 95       	ret
			 
			 case PG:
			 CLEAR_BIT(DDRG,pin_num);
 5ba:	e4 e6       	ldi	r30, 0x64	; 100
 5bc:	f0 e0       	ldi	r31, 0x00	; 0
 5be:	40 81       	ld	r20, Z
 5c0:	21 e0       	ldi	r18, 0x01	; 1
 5c2:	30 e0       	ldi	r19, 0x00	; 0
 5c4:	b9 01       	movw	r22, r18
 5c6:	02 c0       	rjmp	.+4      	; 0x5cc <__LOCK_REGION_LENGTH__+0x1cc>
 5c8:	66 0f       	add	r22, r22
 5ca:	77 1f       	adc	r23, r23
 5cc:	8a 95       	dec	r24
 5ce:	e2 f7       	brpl	.-8      	; 0x5c8 <__LOCK_REGION_LENGTH__+0x1c8>
 5d0:	cb 01       	movw	r24, r22
 5d2:	96 2f       	mov	r25, r22
 5d4:	90 95       	com	r25
 5d6:	94 23       	and	r25, r20
 5d8:	90 83       	st	Z, r25
			 SET_BIT(PORTG,pin_num);
 5da:	e5 e6       	ldi	r30, 0x65	; 101
 5dc:	f0 e0       	ldi	r31, 0x00	; 0
 5de:	90 81       	ld	r25, Z
 5e0:	89 2b       	or	r24, r25
 5e2:	80 83       	st	Z, r24
 5e4:	08 95       	ret

000005e6 <DIO_Init>:

#define F_CPU 1000000UL
#include "util/delay.h"

 void DIO_Init(void)
 {
 5e6:	0f 93       	push	r16
 5e8:	1f 93       	push	r17
 5ea:	cf 93       	push	r28
 5ec:	00 e0       	ldi	r16, 0x00	; 0
 5ee:	11 e0       	ldi	r17, 0x01	; 1
	 DIO_Pin_type i;
	 for(i=PINA0;i<TOTAL_PINS;i++)
 5f0:	c0 e0       	ldi	r28, 0x00	; 0
	 DIO_Initpin(i,PinStatus[i]);
 5f2:	f8 01       	movw	r30, r16
 5f4:	61 91       	ld	r22, Z+
 5f6:	8f 01       	movw	r16, r30
 5f8:	8c 2f       	mov	r24, r28
 5fa:	5f de       	rcall	.-834    	; 0x2ba <DIO_Initpin>
#include "util/delay.h"

 void DIO_Init(void)
 {
	 DIO_Pin_type i;
	 for(i=PINA0;i<TOTAL_PINS;i++)
 5fc:	cf 5f       	subi	r28, 0xFF	; 255
 5fe:	c5 33       	cpi	r28, 0x35	; 53
 600:	c1 f7       	brne	.-16     	; 0x5f2 <DIO_Init+0xc>
	 DIO_Initpin(i,PinStatus[i]);
 }
 602:	cf 91       	pop	r28
 604:	1f 91       	pop	r17
 606:	0f 91       	pop	r16
 608:	08 95       	ret

0000060a <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = (1<<TWEN) | (1<<TWIE) | (1<<TWEA) | (1<<TWINT) | (1<<TWSTO);
 60a:	85 ed       	ldi	r24, 0xD5	; 213
 60c:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & (1<<TWSTO)){
 610:	e4 e7       	ldi	r30, 0x74	; 116
 612:	f0 e0       	ldi	r31, 0x00	; 0
 614:	80 81       	ld	r24, Z
 616:	84 fd       	sbrc	r24, 4
 618:	fd cf       	rjmp	.-6      	; 0x614 <twi_stop+0xa>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
 61a:	10 92 a3 01 	sts	0x01A3, r1	; 0x8001a3 <twi_state>
 61e:	08 95       	ret

00000620 <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = (1<<TWEN) | (1<<TWIE) | (1<<TWEA) | (1<<TWINT);
 620:	85 ec       	ldi	r24, 0xC5	; 197
 622:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>

  // update twi state
  twi_state = TWI_READY;
 626:	10 92 a3 01 	sts	0x01A3, r1	; 0x8001a3 <twi_state>
 62a:	08 95       	ret

0000062c <__vector_33>:
}

ISR(TWI_vect)
{
 62c:	1f 92       	push	r1
 62e:	0f 92       	push	r0
 630:	0f b6       	in	r0, 0x3f	; 63
 632:	0f 92       	push	r0
 634:	11 24       	eor	r1, r1
 636:	0b b6       	in	r0, 0x3b	; 59
 638:	0f 92       	push	r0
 63a:	2f 93       	push	r18
 63c:	3f 93       	push	r19
 63e:	4f 93       	push	r20
 640:	5f 93       	push	r21
 642:	6f 93       	push	r22
 644:	7f 93       	push	r23
 646:	8f 93       	push	r24
 648:	9f 93       	push	r25
 64a:	af 93       	push	r26
 64c:	bf 93       	push	r27
 64e:	ef 93       	push	r30
 650:	ff 93       	push	r31
  switch(TW_STATUS){
 652:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
 656:	e8 2f       	mov	r30, r24
 658:	e8 7f       	andi	r30, 0xF8	; 248
 65a:	8e 2f       	mov	r24, r30
 65c:	90 e0       	ldi	r25, 0x00	; 0
 65e:	89 3c       	cpi	r24, 0xC9	; 201
 660:	91 05       	cpc	r25, r1
 662:	08 f0       	brcs	.+2      	; 0x666 <__vector_33+0x3a>
 664:	ee c0       	rjmp	.+476    	; 0x842 <__vector_33+0x216>
 666:	fc 01       	movw	r30, r24
 668:	e5 5a       	subi	r30, 0xA5	; 165
 66a:	ff 4f       	sbci	r31, 0xFF	; 255
 66c:	b1 c1       	rjmp	.+866    	; 0x9d0 <__tablejump2__>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
 66e:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <twi_slarw>
 672:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
 */
void twi_reply(u8 ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = (1<<TWEN) | (1<<TWIE) | (1<<TWINT) | (1<<TWEA);
 676:	85 ec       	ldi	r24, 0xC5	; 197
 678:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
 67c:	e2 c0       	rjmp	.+452    	; 0x842 <__vector_33+0x216>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
 67e:	90 91 7b 01 	lds	r25, 0x017B	; 0x80017b <twi_masterBufferIndex>
 682:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <twi_masterBufferLength>
 686:	98 17       	cp	r25, r24
 688:	80 f4       	brcc	.+32     	; 0x6aa <__vector_33+0x7e>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
 68a:	e0 91 7b 01 	lds	r30, 0x017B	; 0x80017b <twi_masterBufferIndex>
 68e:	81 e0       	ldi	r24, 0x01	; 1
 690:	8e 0f       	add	r24, r30
 692:	80 93 7b 01 	sts	0x017B, r24	; 0x80017b <twi_masterBufferIndex>
 696:	f0 e0       	ldi	r31, 0x00	; 0
 698:	e4 58       	subi	r30, 0x84	; 132
 69a:	fe 4f       	sbci	r31, 0xFE	; 254
 69c:	80 81       	ld	r24, Z
 69e:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
 */
void twi_reply(u8 ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = (1<<TWEN) | (1<<TWIE) | (1<<TWINT) | (1<<TWEA);
 6a2:	85 ec       	ldi	r24, 0xC5	; 197
 6a4:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
 6a8:	cc c0       	rjmp	.+408    	; 0x842 <__vector_33+0x216>
      if(twi_masterBufferIndex < twi_masterBufferLength){
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
        twi_reply(1);
      }else{
	if (twi_sendStop)
 6aa:	80 91 a1 01 	lds	r24, 0x01A1	; 0x8001a1 <twi_sendStop>
 6ae:	88 23       	and	r24, r24
          twi_stop();
 6b0:	11 f0       	breq	.+4      	; 0x6b6 <__vector_33+0x8a>
 6b2:	ab df       	rcall	.-170    	; 0x60a <twi_stop>
 6b4:	c6 c0       	rjmp	.+396    	; 0x842 <__vector_33+0x216>
	else {
	  twi_inRepStart = TRUE;	// we're gonna send the START
 6b6:	81 e0       	ldi	r24, 0x01	; 1
 6b8:	80 93 a0 01 	sts	0x01A0, r24	; 0x8001a0 <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = (1<<TWINT) | (1<<TWSTA)| (1<<TWEN) ;
 6bc:	84 ea       	ldi	r24, 0xA4	; 164
 6be:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
	  twi_state = TWI_READY;
 6c2:	10 92 a3 01 	sts	0x01A3, r1	; 0x8001a3 <twi_state>
 6c6:	bd c0       	rjmp	.+378    	; 0x842 <__vector_33+0x216>
	}
      }
      break;
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
 6c8:	80 e2       	ldi	r24, 0x20	; 32
 6ca:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <__data_end>
      twi_stop();
 6ce:	9d df       	rcall	.-198    	; 0x60a <twi_stop>
      break;
 6d0:	b8 c0       	rjmp	.+368    	; 0x842 <__vector_33+0x216>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
 6d2:	80 e3       	ldi	r24, 0x30	; 48
 6d4:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <__data_end>
      twi_stop();
 6d8:	98 df       	rcall	.-208    	; 0x60a <twi_stop>
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
 6da:	b3 c0       	rjmp	.+358    	; 0x842 <__vector_33+0x216>
 6dc:	88 e3       	ldi	r24, 0x38	; 56
 6de:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <__data_end>
      twi_releaseBus();
 6e2:	9e df       	rcall	.-196    	; 0x620 <twi_releaseBus>
      break;
 6e4:	ae c0       	rjmp	.+348    	; 0x842 <__vector_33+0x216>

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
 6e6:	e0 91 7b 01 	lds	r30, 0x017B	; 0x80017b <twi_masterBufferIndex>
 6ea:	81 e0       	ldi	r24, 0x01	; 1
 6ec:	8e 0f       	add	r24, r30
 6ee:	80 93 7b 01 	sts	0x017B, r24	; 0x80017b <twi_masterBufferIndex>
 6f2:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
 6f6:	f0 e0       	ldi	r31, 0x00	; 0
 6f8:	e4 58       	subi	r30, 0x84	; 132
 6fa:	fe 4f       	sbci	r31, 0xFE	; 254
 6fc:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
 6fe:	90 91 7b 01 	lds	r25, 0x017B	; 0x80017b <twi_masterBufferIndex>
 702:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <twi_masterBufferLength>
 706:	98 17       	cp	r25, r24
 708:	20 f4       	brcc	.+8      	; 0x712 <__vector_33+0xe6>
 */
void twi_reply(u8 ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = (1<<TWEN) | (1<<TWIE) | (1<<TWINT) | (1<<TWEA);
 70a:	85 ec       	ldi	r24, 0xC5	; 197
 70c:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
 710:	98 c0       	rjmp	.+304    	; 0x842 <__vector_33+0x216>
  }else{
	  TWCR = (1<<TWEN) | (1<<TWIE) | (1<<TWINT);
 712:	85 e8       	ldi	r24, 0x85	; 133
 714:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
 718:	94 c0       	rjmp	.+296    	; 0x842 <__vector_33+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
 71a:	e0 91 7b 01 	lds	r30, 0x017B	; 0x80017b <twi_masterBufferIndex>
 71e:	81 e0       	ldi	r24, 0x01	; 1
 720:	8e 0f       	add	r24, r30
 722:	80 93 7b 01 	sts	0x017B, r24	; 0x80017b <twi_masterBufferIndex>
 726:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
 72a:	f0 e0       	ldi	r31, 0x00	; 0
 72c:	e4 58       	subi	r30, 0x84	; 132
 72e:	fe 4f       	sbci	r31, 0xFE	; 254
	if (twi_sendStop)
 730:	80 83       	st	Z, r24
 732:	80 91 a1 01 	lds	r24, 0x01A1	; 0x8001a1 <twi_sendStop>
 736:	88 23       	and	r24, r24
          twi_stop();
 738:	11 f0       	breq	.+4      	; 0x73e <__vector_33+0x112>
 73a:	67 df       	rcall	.-306    	; 0x60a <twi_stop>
 73c:	82 c0       	rjmp	.+260    	; 0x842 <__vector_33+0x216>
	else {
	  twi_inRepStart = TRUE;	// we're gonna send the START
 73e:	81 e0       	ldi	r24, 0x01	; 1
 740:	80 93 a0 01 	sts	0x01A0, r24	; 0x8001a0 <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = (1<<TWINT) | (1<<TWSTA)| (1<<TWEN) ;
 744:	84 ea       	ldi	r24, 0xA4	; 164
 746:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
	  twi_state = TWI_READY;
 74a:	10 92 a3 01 	sts	0x01A3, r1	; 0x8001a3 <twi_state>
	}    
	break;
    case TW_MR_SLA_NACK: // address sent, nack received
      twi_stop();
 74e:	79 c0       	rjmp	.+242    	; 0x842 <__vector_33+0x216>
 750:	5c df       	rcall	.-328    	; 0x60a <twi_stop>
      break;
 752:	77 c0       	rjmp	.+238    	; 0x842 <__vector_33+0x216>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
 754:	83 e0       	ldi	r24, 0x03	; 3
 756:	80 93 a3 01 	sts	0x01A3, r24	; 0x8001a3 <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
 75a:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <twi_rxBufferIndex>
 */
void twi_reply(u8 ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = (1<<TWEN) | (1<<TWIE) | (1<<TWINT) | (1<<TWEA);
 75e:	85 ec       	ldi	r24, 0xC5	; 197
 760:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
 764:	6e c0       	rjmp	.+220    	; 0x842 <__vector_33+0x216>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
 766:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <twi_rxBufferIndex>
 76a:	80 32       	cpi	r24, 0x20	; 32
 76c:	80 f4       	brcc	.+32     	; 0x78e <__vector_33+0x162>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
 76e:	e0 91 37 01 	lds	r30, 0x0137	; 0x800137 <twi_rxBufferIndex>
 772:	81 e0       	ldi	r24, 0x01	; 1
 774:	8e 0f       	add	r24, r30
 776:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <twi_rxBufferIndex>
 77a:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
 77e:	f0 e0       	ldi	r31, 0x00	; 0
 780:	e8 5c       	subi	r30, 0xC8	; 200
 782:	fe 4f       	sbci	r31, 0xFE	; 254
 784:	80 83       	st	Z, r24
 */
void twi_reply(u8 ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = (1<<TWEN) | (1<<TWIE) | (1<<TWINT) | (1<<TWEA);
 786:	85 ec       	ldi	r24, 0xC5	; 197
 788:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
  }else{
	  TWCR = (1<<TWEN) | (1<<TWIE) | (1<<TWINT);
 78c:	5a c0       	rjmp	.+180    	; 0x842 <__vector_33+0x216>
 78e:	85 e8       	ldi	r24, 0x85	; 133
 790:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
 794:	56 c0       	rjmp	.+172    	; 0x842 <__vector_33+0x216>
 796:	44 df       	rcall	.-376    	; 0x620 <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
 798:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <twi_rxBufferIndex>
 79c:	80 32       	cpi	r24, 0x20	; 32
 79e:	30 f4       	brcc	.+12     	; 0x7ac <__vector_33+0x180>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
 7a0:	e0 91 37 01 	lds	r30, 0x0137	; 0x800137 <twi_rxBufferIndex>
 7a4:	f0 e0       	ldi	r31, 0x00	; 0
 7a6:	e8 5c       	subi	r30, 0xC8	; 200
 7a8:	fe 4f       	sbci	r31, 0xFE	; 254
 7aa:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
 7ac:	40 91 37 01 	lds	r20, 0x0137	; 0x800137 <twi_rxBufferIndex>
 7b0:	50 e0       	ldi	r21, 0x00	; 0
 7b2:	60 e0       	ldi	r22, 0x00	; 0
 7b4:	70 e0       	ldi	r23, 0x00	; 0
 7b6:	e0 91 9c 01 	lds	r30, 0x019C	; 0x80019c <twi_onSlaveReceive>
 7ba:	f0 91 9d 01 	lds	r31, 0x019D	; 0x80019d <twi_onSlaveReceive+0x1>
 7be:	88 e3       	ldi	r24, 0x38	; 56
 7c0:	91 e0       	ldi	r25, 0x01	; 1
 7c2:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
 7c4:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <twi_rxBufferIndex>
      break;
 7c8:	3c c0       	rjmp	.+120    	; 0x842 <__vector_33+0x216>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = (1<<TWEN) | (1<<TWIE) | (1<<TWINT) | (1<<TWEA);
  }else{
	  TWCR = (1<<TWEN) | (1<<TWIE) | (1<<TWINT);
 7ca:	85 e8       	ldi	r24, 0x85	; 133
 7cc:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
 7d0:	38 c0       	rjmp	.+112    	; 0x842 <__vector_33+0x216>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
 7d2:	84 e0       	ldi	r24, 0x04	; 4
 7d4:	80 93 a3 01 	sts	0x01A3, r24	; 0x8001a3 <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
 7d8:	10 92 59 01 	sts	0x0159, r1	; 0x800159 <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
 7dc:	10 92 58 01 	sts	0x0158, r1	; 0x800158 <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
 7e0:	e0 91 9e 01 	lds	r30, 0x019E	; 0x80019e <twi_onSlaveTransmit>
 7e4:	f0 91 9f 01 	lds	r31, 0x019F	; 0x80019f <twi_onSlaveTransmit+0x1>
 7e8:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
 7ea:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <twi_txBufferLength>
 7ee:	81 11       	cpse	r24, r1
 7f0:	05 c0       	rjmp	.+10     	; 0x7fc <__vector_33+0x1d0>
        twi_txBufferLength = 1;
 7f2:	81 e0       	ldi	r24, 0x01	; 1
 7f4:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
 7f8:	10 92 5a 01 	sts	0x015A, r1	; 0x80015a <twi_txBuffer>
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
 7fc:	e0 91 59 01 	lds	r30, 0x0159	; 0x800159 <twi_txBufferIndex>
 800:	81 e0       	ldi	r24, 0x01	; 1
 802:	8e 0f       	add	r24, r30
 804:	80 93 59 01 	sts	0x0159, r24	; 0x800159 <twi_txBufferIndex>
 808:	f0 e0       	ldi	r31, 0x00	; 0
 80a:	e6 5a       	subi	r30, 0xA6	; 166
 80c:	fe 4f       	sbci	r31, 0xFE	; 254
 80e:	80 81       	ld	r24, Z
 810:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
 814:	90 91 59 01 	lds	r25, 0x0159	; 0x800159 <twi_txBufferIndex>
 818:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <twi_txBufferLength>
 81c:	98 17       	cp	r25, r24
 81e:	20 f4       	brcc	.+8      	; 0x828 <__vector_33+0x1fc>
 */
void twi_reply(u8 ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = (1<<TWEN) | (1<<TWIE) | (1<<TWINT) | (1<<TWEA);
 820:	85 ec       	ldi	r24, 0xC5	; 197
 822:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
 826:	0d c0       	rjmp	.+26     	; 0x842 <__vector_33+0x216>
  }else{
	  TWCR = (1<<TWEN) | (1<<TWIE) | (1<<TWINT);
 828:	85 e8       	ldi	r24, 0x85	; 133
 82a:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
 82e:	09 c0       	rjmp	.+18     	; 0x842 <__vector_33+0x216>
 */
void twi_reply(u8 ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = (1<<TWEN) | (1<<TWIE) | (1<<TWINT) | (1<<TWEA);
 830:	85 ec       	ldi	r24, 0xC5	; 197
 832:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
 836:	10 92 a3 01 	sts	0x01A3, r1	; 0x8001a3 <twi_state>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
 83a:	03 c0       	rjmp	.+6      	; 0x842 <__vector_33+0x216>
 83c:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <__data_end>
      twi_stop();
 840:	e4 de       	rcall	.-568    	; 0x60a <twi_stop>
      break;
  }
}
 842:	ff 91       	pop	r31
 844:	ef 91       	pop	r30
 846:	bf 91       	pop	r27
 848:	af 91       	pop	r26
 84a:	9f 91       	pop	r25
 84c:	8f 91       	pop	r24
 84e:	7f 91       	pop	r23
 850:	6f 91       	pop	r22
 852:	5f 91       	pop	r21
 854:	4f 91       	pop	r20
 856:	3f 91       	pop	r19
 858:	2f 91       	pop	r18
 85a:	0f 90       	pop	r0
 85c:	0b be       	out	0x3b, r0	; 59
 85e:	0f 90       	pop	r0
 860:	0f be       	out	0x3f, r0	; 63
 862:	0f 90       	pop	r0
 864:	1f 90       	pop	r1
 866:	18 95       	reti

00000868 <__vector_18>:
	UART0_TX_Fptr = LocalFptr;
}


ISR(USART0_RX_vect)
{
 868:	1f 92       	push	r1
 86a:	0f 92       	push	r0
 86c:	0f b6       	in	r0, 0x3f	; 63
 86e:	0f 92       	push	r0
 870:	11 24       	eor	r1, r1
 872:	0b b6       	in	r0, 0x3b	; 59
 874:	0f 92       	push	r0
 876:	2f 93       	push	r18
 878:	3f 93       	push	r19
 87a:	4f 93       	push	r20
 87c:	5f 93       	push	r21
 87e:	6f 93       	push	r22
 880:	7f 93       	push	r23
 882:	8f 93       	push	r24
 884:	9f 93       	push	r25
 886:	af 93       	push	r26
 888:	bf 93       	push	r27
 88a:	ef 93       	push	r30
 88c:	ff 93       	push	r31
	if (UART0_RX_Fptr!=NULLPTR)
 88e:	e0 91 a6 01 	lds	r30, 0x01A6	; 0x8001a6 <UART0_RX_Fptr>
 892:	f0 91 a7 01 	lds	r31, 0x01A7	; 0x8001a7 <UART0_RX_Fptr+0x1>
 896:	30 97       	sbiw	r30, 0x00	; 0
 898:	09 f0       	breq	.+2      	; 0x89c <__vector_18+0x34>
	{
		UART0_RX_Fptr();
 89a:	09 95       	icall
	}
}
 89c:	ff 91       	pop	r31
 89e:	ef 91       	pop	r30
 8a0:	bf 91       	pop	r27
 8a2:	af 91       	pop	r26
 8a4:	9f 91       	pop	r25
 8a6:	8f 91       	pop	r24
 8a8:	7f 91       	pop	r23
 8aa:	6f 91       	pop	r22
 8ac:	5f 91       	pop	r21
 8ae:	4f 91       	pop	r20
 8b0:	3f 91       	pop	r19
 8b2:	2f 91       	pop	r18
 8b4:	0f 90       	pop	r0
 8b6:	0b be       	out	0x3b, r0	; 59
 8b8:	0f 90       	pop	r0
 8ba:	0f be       	out	0x3f, r0	; 63
 8bc:	0f 90       	pop	r0
 8be:	1f 90       	pop	r1
 8c0:	18 95       	reti

000008c2 <__vector_20>:

ISR(USART0_TX_vect)
{
 8c2:	1f 92       	push	r1
 8c4:	0f 92       	push	r0
 8c6:	0f b6       	in	r0, 0x3f	; 63
 8c8:	0f 92       	push	r0
 8ca:	11 24       	eor	r1, r1
 8cc:	0b b6       	in	r0, 0x3b	; 59
 8ce:	0f 92       	push	r0
 8d0:	2f 93       	push	r18
 8d2:	3f 93       	push	r19
 8d4:	4f 93       	push	r20
 8d6:	5f 93       	push	r21
 8d8:	6f 93       	push	r22
 8da:	7f 93       	push	r23
 8dc:	8f 93       	push	r24
 8de:	9f 93       	push	r25
 8e0:	af 93       	push	r26
 8e2:	bf 93       	push	r27
 8e4:	ef 93       	push	r30
 8e6:	ff 93       	push	r31
	if (UART0_TX_Fptr!=NULLPTR)
 8e8:	e0 91 a4 01 	lds	r30, 0x01A4	; 0x8001a4 <UART0_TX_Fptr>
 8ec:	f0 91 a5 01 	lds	r31, 0x01A5	; 0x8001a5 <UART0_TX_Fptr+0x1>
 8f0:	30 97       	sbiw	r30, 0x00	; 0
 8f2:	09 f0       	breq	.+2      	; 0x8f6 <__vector_20+0x34>
	{
		UART0_TX_Fptr();
 8f4:	09 95       	icall
	}
}	
 8f6:	ff 91       	pop	r31
 8f8:	ef 91       	pop	r30
 8fa:	bf 91       	pop	r27
 8fc:	af 91       	pop	r26
 8fe:	9f 91       	pop	r25
 900:	8f 91       	pop	r24
 902:	7f 91       	pop	r23
 904:	6f 91       	pop	r22
 906:	5f 91       	pop	r21
 908:	4f 91       	pop	r20
 90a:	3f 91       	pop	r19
 90c:	2f 91       	pop	r18
 90e:	0f 90       	pop	r0
 910:	0b be       	out	0x3b, r0	; 59
 912:	0f 90       	pop	r0
 914:	0f be       	out	0x3f, r0	; 63
 916:	0f 90       	pop	r0
 918:	1f 90       	pop	r1
 91a:	18 95       	reti

0000091c <__vector_30>:
	UART1_TX_Fptr = LocalFptr;
}


ISR(USART1_RX_vect)
{
 91c:	1f 92       	push	r1
 91e:	0f 92       	push	r0
 920:	0f b6       	in	r0, 0x3f	; 63
 922:	0f 92       	push	r0
 924:	11 24       	eor	r1, r1
 926:	0b b6       	in	r0, 0x3b	; 59
 928:	0f 92       	push	r0
 92a:	2f 93       	push	r18
 92c:	3f 93       	push	r19
 92e:	4f 93       	push	r20
 930:	5f 93       	push	r21
 932:	6f 93       	push	r22
 934:	7f 93       	push	r23
 936:	8f 93       	push	r24
 938:	9f 93       	push	r25
 93a:	af 93       	push	r26
 93c:	bf 93       	push	r27
 93e:	ef 93       	push	r30
 940:	ff 93       	push	r31
	if (UART1_RX_Fptr!=NULLPTR)
 942:	e0 91 aa 01 	lds	r30, 0x01AA	; 0x8001aa <UART1_RX_Fptr>
 946:	f0 91 ab 01 	lds	r31, 0x01AB	; 0x8001ab <UART1_RX_Fptr+0x1>
 94a:	30 97       	sbiw	r30, 0x00	; 0
 94c:	09 f0       	breq	.+2      	; 0x950 <__vector_30+0x34>
	{
		UART1_RX_Fptr();
 94e:	09 95       	icall
	}
}
 950:	ff 91       	pop	r31
 952:	ef 91       	pop	r30
 954:	bf 91       	pop	r27
 956:	af 91       	pop	r26
 958:	9f 91       	pop	r25
 95a:	8f 91       	pop	r24
 95c:	7f 91       	pop	r23
 95e:	6f 91       	pop	r22
 960:	5f 91       	pop	r21
 962:	4f 91       	pop	r20
 964:	3f 91       	pop	r19
 966:	2f 91       	pop	r18
 968:	0f 90       	pop	r0
 96a:	0b be       	out	0x3b, r0	; 59
 96c:	0f 90       	pop	r0
 96e:	0f be       	out	0x3f, r0	; 63
 970:	0f 90       	pop	r0
 972:	1f 90       	pop	r1
 974:	18 95       	reti

00000976 <__vector_32>:

ISR(USART1_TX_vect)
{
 976:	1f 92       	push	r1
 978:	0f 92       	push	r0
 97a:	0f b6       	in	r0, 0x3f	; 63
 97c:	0f 92       	push	r0
 97e:	11 24       	eor	r1, r1
 980:	0b b6       	in	r0, 0x3b	; 59
 982:	0f 92       	push	r0
 984:	2f 93       	push	r18
 986:	3f 93       	push	r19
 988:	4f 93       	push	r20
 98a:	5f 93       	push	r21
 98c:	6f 93       	push	r22
 98e:	7f 93       	push	r23
 990:	8f 93       	push	r24
 992:	9f 93       	push	r25
 994:	af 93       	push	r26
 996:	bf 93       	push	r27
 998:	ef 93       	push	r30
 99a:	ff 93       	push	r31
	if (UART1_TX_Fptr!=NULLPTR)
 99c:	e0 91 a8 01 	lds	r30, 0x01A8	; 0x8001a8 <UART1_TX_Fptr>
 9a0:	f0 91 a9 01 	lds	r31, 0x01A9	; 0x8001a9 <UART1_TX_Fptr+0x1>
 9a4:	30 97       	sbiw	r30, 0x00	; 0
 9a6:	09 f0       	breq	.+2      	; 0x9aa <__vector_32+0x34>
	{
		UART1_TX_Fptr();
 9a8:	09 95       	icall
	}
}	
 9aa:	ff 91       	pop	r31
 9ac:	ef 91       	pop	r30
 9ae:	bf 91       	pop	r27
 9b0:	af 91       	pop	r26
 9b2:	9f 91       	pop	r25
 9b4:	8f 91       	pop	r24
 9b6:	7f 91       	pop	r23
 9b8:	6f 91       	pop	r22
 9ba:	5f 91       	pop	r21
 9bc:	4f 91       	pop	r20
 9be:	3f 91       	pop	r19
 9c0:	2f 91       	pop	r18
 9c2:	0f 90       	pop	r0
 9c4:	0b be       	out	0x3b, r0	; 59
 9c6:	0f 90       	pop	r0
 9c8:	0f be       	out	0x3f, r0	; 63
 9ca:	0f 90       	pop	r0
 9cc:	1f 90       	pop	r1
 9ce:	18 95       	reti

000009d0 <__tablejump2__>:
 9d0:	ee 0f       	add	r30, r30
 9d2:	ff 1f       	adc	r31, r31
 9d4:	00 24       	eor	r0, r0
 9d6:	00 1c       	adc	r0, r0
 9d8:	0b be       	out	0x3b, r0	; 59
 9da:	07 90       	elpm	r0, Z+
 9dc:	f6 91       	elpm	r31, Z
 9de:	e0 2d       	mov	r30, r0
 9e0:	09 94       	ijmp

000009e2 <_exit>:
 9e2:	f8 94       	cli

000009e4 <__stop_program>:
 9e4:	ff cf       	rjmp	.-2      	; 0x9e4 <__stop_program>
